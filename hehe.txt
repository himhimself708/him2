// ==UserScript==
// @name         loux by him
// @namespace    http://tampermonkey.net/
// @version      0.1
// @description  try to take over the world!
// @author       You
// @match        https://starve.io/
// @icon         https://www.google.com/s2/favicons?sz=64&domain=starve.io
// @run-at       document-start
// @grant        none
// @require 	 https://unpkg.com/guify@0.12.0/lib/guify.min.js
// @noframes
// ==/UserScript==

function drawChestInfo(chest) {
	const ctx = document.getElementById("game_canvas").getContext("2d");

	if (chest.action && S.chestinfo) {
		const buttons = Object.entries(UI).find(
			([key, value]) => Array.isArray(value) && value.undefined !== undefined
		)?.[0];
		const item = UI[buttons][chest.action / 2 - 1]?.info;
		if (!item) return;
		const info = Object.values(item).find(Array.isArray)?.[0];
		ctx.save();
		ctx.globalAlpha = 0.9;
		ctxDrawImage(ctx, info, user["ⵠΔΔ"].x + chest.x - 33, user["ⵠΔΔ"].y + chest.y - 25, 67, 52);
		ctx.globalAlpha = 1;
		ctx.font = "20px Baloo Paaji";
		ctx.strokeStyle = "rgb(0,0,0)";
		ctx.lineWidth = 7;
		ctx.strokeText(chest.action / 2 - 1, user["ⵠΔΔ"].x + chest.x - 32, user["ⵠΔΔ"].y + chest.y - 12);
		ctx.strokeText("x" + chest.info, user["ⵠΔΔ"].x + chest.x - 32, user["ⵠΔΔ"].y + chest.y + 20);
		ctx.fillStyle = "rgb(255,255,255)";
		ctx.fillText(chest.action / 2 - 1, user["ⵠΔΔ"].x + chest.x - 32, user["ⵠΔΔ"].y + chest.y - 12);
		ctx.fillText("x" + chest.info, user["ⵠΔΔ"].x + chest.x - 32, user["ⵠΔΔ"].y + chest.y + 20);
		ctx.restore();
	}
}
window.drawChestInfo = drawChestInfo;
function ctxDrawImage(ctx, img, b, c, d, e, f, g, h, i) {
	if (img.tryLoad === undefined || img.tryLoad() === 1) {
		if (i !== undefined) ctx.drawImage(img, b, c, Math.max(1, d), Math.max(1, e), f, g, h, i);
		else if (e !== undefined) ctx.drawImage(img, b, c, d, e);
		else ctx.drawImage(img, b, c);
	}
}

// window.vars = {
// 	fast_units: null,
// 	units: null,
// 	inv: null,
// 	inv_ids: null,
// 	n: null,
// 	chat: null,
// 	terminal: null,
// 	cam: null,
// 	team: null,
// 	socket: null,
// 	select_craft: null,
// 	drawSpike: null,
// 	pid: null,
// 	skin: null,
// 	accessory: null,
// 	bag: null,
// 	book: null,
// 	pos: null,
// 	helmet: null,
// 	token_id: null,
// 	token: null,
// 	update: null,
// 	send_move: null,
// 	select_inv: null,
// 	is_top: null,
// 	is_bottom: null,
// 	is_left: null,
// 	is_right: null,
// 	recycle: null,
// recover_focus: null,
// change: null,
// };
window.vars = {
	fast_units: "ⵠΔⵠⲆⵠ",
	units: "ⵠⵠᐃ",
	inv: "ΔⲆⵠⲆ",
	inv_ids: "ᐃⵠΔΔⲆ",
	n: "ᐃᐃΔ",
	chat: "ΔΔᐃⲆⲆ",
	terminal: "ΔᐃⵠⲆⵠ",
	cam: "ⵠΔΔ",
	team: "ΔⵠⵠΔᐃ",
	socket: "ΔᐃⲆᐃ",
	select_craft: "ᐃΔΔᐃⲆⵠΔⵠⲆ",
	drawSpike: "ⵠⲆⵠⲆ",
	pid: "ⵠⵠΔᐃ",
	skin: "ⲆⵠⵠⲆ",
	accessory: "ⵠⲆⲆⲆⵠ",
	bag: "ᐃⲆᐃᐃⲆ",
	book: "ΔⵠΔᐃⲆ",
	pos: "ΔⲆⲆΔ",
	helmet: "ᐃᐃⲆΔᐃ",
	token_id: "ᐃᐃᐃΔᐃΔⲆ",
	token: "ⵠⲆᐃᐃΔ",
	update: "ᐃⵠⵠ",
	send_move: "ΔΔΔΔᐃⵠᐃᐃᐃ",
	select_inv: "ⲆⲆΔⲆΔ",
	is_top: "ⲆΔΔΔⵠΔⵠ",
	is_bottom: "ⵠᐃΔⲆⲆΔⵠ",
	is_left: "ᐃⵠⵠⵠΔᐃΔ",
	is_right: "ᐃⲆⲆᐃΔⵠⲆ",
	recycle: "ᐃⵠⵠⲆⵠᐃⲆⵠⵠ",
	recover_focus: "ΔⲆΔⲆᐃΔⵠΔⲆ",
	change: "ΔⲆⲆΔΔ",
};

const packets = {
	extPut: 9,
	extTake: 1,
	windMillPut: 14,
	windMillTake: 26,
	ovenPutWood: 17,
	ovenPutFlour: 0,
	ovenTake: 12,
	placeBuild: 15,
	drop: 11,
	angle: 19,
	attack: 24,
	stopAttack: 36,
	unlock: 23,
	chestPut: 13,
	chestTake: 27,
	equip: 16,
	craft: 2,
	recycle: 20,
	joinTotem: 38,
	revive: 33,
};

const skins = [
	"Starver",
	"Angry",
	"Sad",
	"Happy 1",
	"What?",
	"Suspicious",
	"Scar",
	"In Trouble",
	"Cute",
	"Bored 1",
	"Happy 2",
	"Crazy",
	"Happy 3",
	"Very Cute",
	"Curious",
	"Bored 2",
	"Happy 4",
	"Scar 2",
	"Sick",
	"Somnambule",
	"Feel Bad",
	"Mmmh.",
	"Panic",
	"Hypnotic",
	"Stars in the eyes",
	"Seams",
	"Scared at night",
	"Vampire",
	"Zombie",
	"Devaster",
	"Dead Devaster",
	"Cactus",
	"Bee",
	"Camo Skin",
	"Blue Limax Skin",
	"Red Limax Skin",
	"Mr. Pumpkin",
	"Wood",
	"Zebra",
	"Tiger",
	"Day or Night",
	"Square Starver",
	"Voodoo Doll",
	"Frankenstein",
	"Old Mummy",
	"Werewolf",
	"Old Cthulhu",
	"Sea Man",
	"Old Pumpkin",
	"Old Snowman",
	"Old Christmas Tree Man",
	"Old Mrs Bell",
	"Old Elfy",
	"Old Mr Present",
	"My Dear Old Deer",
	"Mr Angel",
	"Mr Ice Cube",
	"Mr Snowman",
	"Crystal Sky Skin",
	"Radioactive Starver",
	"Eaten Cookie",
	"Blob Thing",
	"Machine Mask",
	"Mad",
	"Survivor",
	"Starverator",
	"Totem",
	"Big Pile of Sand",
	"Big Pile of Dirt",
	"Sandstone",
	"Lollipop 1",
	"Lollipop 2",
	"Lollipop 3",
	"Lollipop 4",
	"Yellow Bird",
	"Red Bird",
	"Blue Bird",
	"Owl",
	"Nemo",
	"Mr. Bread",
	"Mr. Bread 2",
	"Mr. Bread 3",
	"Red Berry",
	"Old Berry",
	"Cake",
	"Christmas Cake",
	"Mr. Pancake",
	"Mr. Taco",
	"Mr. Bottle",
	"Mr. Bottle 2",
	"Pink Rabbit",
	"Marshmallow",
	"Fox",
	"Raccoon",
	"Cloud",
	"Moon",
	"Mr. Panda",
	"Mr. Strawberry",
	"Mummy",
	"Dino",
	"Mr. Koala",
	"Bottle Protection",
	"Leaf Man",
	"Bubble",
	"Potato",
	"Axolotl",
	"Rusted Machine",
	"Starving Machine",
	"Night Stars",
	"Blue Jay",
	"Dave",
	"Smug",
	"Reclaimed",
	"Legacy Wolf",
	"Starver of the Seas",
	"Ice",
	"Sandwich Cookie",
	"Purple Geode",
	"Cyan Geode",
	"Yellow Geode",
	"Furnace Head",
	"Bag",
	"Lit Furnace Head",
	"Test Dummy",
	"Star-ver",
	"Starver Chest",
	"Starver Workbench",
	"Fish",
	"Crab",
	"Piranha",
	"Winter Fox",
	"Baby Foxy",
	"Winter Bear",
	"Hawk",
	"Nice Little Yuki",
	"Baby Yuki",
	"Mr. Carrot",
	"Bat Limax",
	"Mr. Crate",
	"Mr. Spider",
	"Mr. Spider 2",
	"Mr. Blue Starfish",
	"Mr. Orange Starfish",
	"Mr. Pink Starfish",
	"Mr. ShellMauve",
	"Mr. Shell Bead",
	"Angry Crab",
	"Penguin",
	"Mr. Boar",
	"I saw you",
	"It was funny",
	"You can scream",
	"Mr. Book",
	"Mr. Mammoth",
	"Mr. Mammoth 2",
	"Nightmare",
	"Shiny Crystal",
	"Water skin",
	"Fall Berry Bush Starver",
	"Christmas Berry Bush Starver",
	"Berry Bush Starver",
	"Tamer",
	"Tamon Wolf",
	"Tamon Snow Wolf",
	"Tamon Rabbit",
	"Tamon Snow Rabbit",
	"Tamon Bear",
	"Tamon Polar Bear",
	"Crying Angel",
	"Tamon Fennec",
	"Decay",
	"Pillow",
	"Exotic",
	"Apple",
	"Golden Apple",
	"Lava Cube",
	"Dragon Cube",
	"Will-O'-The-Wisp",
	"Flame",
	"Be a Tree",
	"Toxic Mutant",
	"Mr. Tomato",
	"Mr. Mauve, the Lapa",
	"Golden Fish",
	"LapaMauve",
	"LapaMauve ",
	"Mr. Burger",
	"Tropical Starver",
	"Mr. ShellPink",
	"Mr. OranShell",
	"Pepe",
	"Mr. Ant",
	"Mr. Watermelon",
	"Mr. Thornbush",
	"Cthulhu",
	"Mr. Cactus",
	"Momo",
	"Scream",
	"Tamon Dragon",
	"Forest Spirit",
	"Evil Goat",
	"Rotten",
	"Fossil",
	"Tamon Spectrum",
	"Black Cat",
	"Tamon Lynx",
	"Tamon Warg",
	"Tamon Menhir",
	"Mr. Garlic",
	"Robot Dragon",
	"Lava Dragon Version 1",
	"Lava Dragon Version 2",
	"Lava Dragon Version 3",
	"Ice Dragon Version 1",
	"Ice Dragon Version 2",
	"Ice Dragon Version 3",
	"Baby Dragon Version 1",
	"Baby Dragon Version 2",
	"Baby Lava",
	"Kraken",
	"Sandworm",
	"Mr. Golden Bread",
	"Starver Ores",
	"Poo",
	"Volcano Starver",
	"Lava Starver",
	"Revaster",
	"Awakened",
	"Tamon Ice Dragon",
	"Crystal Dragon",
	"Bone Dragon",
	"Tamon Warg Ghost",
	"Cursed",
	"Robot",
	"Blue Butterfly",
	"Yrifox",
	"Blob Skin",
];
const books = [
	"Book 1",
	"Book 2",
	"Book 3",
	"Book 4",
	"Damaged Book 1",
	"Damaged Book 2",
	"Scroll",
	"Clipboard",
	"Seed Book",
	"Camo Book",
	"Stone Tablet",
	"Reclaimed Book",
	"Star Book",
	"Gold Book",
	"Old Mysterious Paper",
	"Gold Engraving",
	"Ant Book",
	"Mummy Book",
	"Garlic Book",
	"Pumpkin Book",
	"Christmas Tree Book",
	"Diamond Book",
	"Obscure Book",
	"Rolled Parchment",
	"Cake Book",
	"Christmas Cake Book",
	"Fish Book",
	"Once upon a time",
	"Chrono Clock",
	"Recipe Book",
	"Amethyst Book",
	"Paint Pallet",
	"Watermelon Book",
	"Thornbush Book",
	"Menu",
	"Lover Letter",
	"Fresh-Baked Cookies",
	"Inside, there is just a book.",
	"Crafting Machine",
	"Winter Book",
	"Autumn Book",
	"Reidite Book",
	"Lava Book",
	"Lava Book 2",
	"Ocean Mystery",
	"Dragon Book",
	"Engineer Book",
	"Nightmare Book",
	"Mystery Book",
	"Cursed Book",
];
const accessories = [
	"Nothing",
	"Pink Cheeks",
	"Heart",
	"Bandage 1",
	"Flower 1",
	"Bow 1",
	"Bandage 2",
	"Flower 2",
	"Bandage 3",
	"Foliage",
	"Peaceful",
	"Sparkles",
	"Luxury",
	"Snow Flakes Crown",
	"Glasses 1",
	"Bow 2",
	"Little Stars",
	"Pirate Eye Patch 1",
	"Pirate Eye Patch 2",
	"Clown nose",
	"Eye Patch",
	"Flower 3",
	"False Nose",
	"Red Cloth",
	"Blue Cloth",
	"Transparent Mask",
	"Starve.io Anime",
	"Hero Mask",
	"This starver is mad",
	"Scars",
	"In Search of Intelligence",
	"Reclaimed Bandage",
	"Unwrap Starver for Gift",
	"Star Glasses",
	"Great-aunt's Glasses",
	"Little Starver",
	"Little Glasses",
	"Flower Chain",
	"Horns",
	"Golden Flower",
	"Sleeping Mask",
	"Fish on your head",
	"Rose",
	"Grey Scarf",
	"Black Scarf",
	"Skull Mask",
	"Golden Monocle",
	"A simple instruction",
	"Garland",
	"The Doormat",
	"Copium Tanks",
	"Eyelashes",
	"Helmet Prototype",
	"Fancy Glasses",
	"Medecin Mask",
	"Mr. Mayor",
	"Sunglasses 2",
	"Starfish",
	"Berry",
	"Flake",
	"Leaf ",
	"A sword in your head",
	"Winter Scarf",
	"Winter Scarf 2",
	"Winter Scarf 3",
	"Mask with animal tracks",
	"Spring Mask",
	"Pink Mask",
	"Blue Mask",
	"Military Mask",
	"Orange Mask",
	"White and Red Points Mask",
	"Stick out your tongue Mask",
	"Two Teeth Mask",
	"Make-up Mask",
	"Sad Mask",
	"Happy Mask",
	"Blood",
	"Axed Plans",
	"Saddle",
	"I see",
	"I have no body and I must dress",
	"Cursed Crown",
	"Clown Face",
	"Sunglasses 3",
	"Engineer's Glasses",
	"Engineer's Monocle",
	"Mauve's butt",
	"Lapa Head",
	"Lapa Head ",
	"Mask and Glasses",
	"Tamon Spectrum Pet",
	"Jason",
	"Devil Horns",
	"Big Boss",
	"Baby Kraken",
	"Deer Antlers",
	"Baby Dragon on your head",
	"Gaz Mask and Glasses",
	"Pink Gaz Mask and Glasses",
	"Engineer Glasses",
	"Jarred Horns",
	"Curved Horns",
	"Evil Goat Horns",
	"Decorative Earmuffs",
	"Tamon Dragon Pet",
	"Blanket",
	"More than Level 5",
	"More than Level 10",
	"More than Level 15",
	"More than Level 20",
	"More than Level 25",
	"More than Level 30",
	"More than Level 35",
	"More than Level 40",
	"More than Level 45",
	"More than Level 50",
	"More than Level 55",
	"More than Level 60",
];

let SandStormImage = new Image();
let BlizzardImage = new Image();

SandStormImage.src = "https://raw.githubusercontent.com/XmreLoux/images/main/sandstorm.png";
BlizzardImage.src = "https://raw.githubusercontent.com/XmreLoux/images/main/blizzard.png";
window.blizard = 0;
window.sandstorm = 0;

const spikeMap = {
	"Reidite Spike": 213 + 6,
	"Amethyst Spike": 117 + 6,
	"Diamond Spike": 164 + 6,
	"Gold Spike": 163 + 6,
	"Stone Spike": 162 + 6,
	"Wood Spike": 154 + 6,
	"Wood Wall": 156 + 6,
	Nothing: -1,
};

let readys = {
	AutoPutRess: true,
	AutoSpike: true,
	AutoWall: true,
	AutoCraft: true,
	AutoRecycle: true,
	AutoBread: true,
	AutoExt: true,
	AutoCrown: true,
};
let cooldowns = {
	AutoPutRess: Date.now(),
	AutoSpike: Date.now(),
	AutoWall: Date.now(),
	AutoCraft: Date.now(),
	AutoExtTake: Date.now(),
	AutoExtPut: Date.now(),
	AutoBreadPut: Date.now(),
	AutoBreadTake: Date.now(),
	AutoCrown: Date.now(),
	Autofarm: Date.now(),
};

let S = {
	e: false,
	AMB: {
		e: false,
		k: "KeyF",
		a: null,
		t: null,
	},
	AutoBook: true,
	Autoice: false,
	AutoBreadPut: {
		e: false,
		k: "NONE",
	},
	AutoBreadTake: {
		e: false,
		k: "NONE",
	},
	AutoPutRess: {
		e: false,
		k: "KeyI",
		m: false,
		c: ["Bridge"],
	},
	AutoBuild: {
		e: false,
		k: "KeyT",
		m: false,
		c: ["Bridge"],
	},
	AutoCraft: {
		e: false,
		k: "KeyK",
		id: -1,
	},
	AutoEme: {
		e: false,
		k: "Numpad2",
		a: null,
	},
	AutoExtPut: {
		e: false,
		k: "NONE",
	},
	AutoExtTake: {
		e: false,
		k: "NONE",
	},
	AutoFire: {
		k: "KeyZ",
	},
	AutoRecycle: {
		e: false,
		k: "KeyL",
	},
	AutoSeed: false,
	AutoSpike: {
		e: false,
		k: "Space",
		m: true,
		p: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall"],
	},
	AutoSpikee: {
		e: false,
		k: "Num5",
		m: true,
	},
	AutoSpikeee: {
		e: false,
		k: "KeyX",
		m: true,
	},
	AutoSteal: {
		e: false,
		k: "KeyQ",
		l: [],
		u: false,
		o: 0,
	},
	AutoTame: {
		e: false,
		k: "KeyJ",
		a: null,
	},
	AutoTotem: {
		e: false,
		k: "KeyH",
	},
	AutoWall: {
		e: false,
		k: "KeyC",
	},
	Autofarm: {
		e: false,
		k: "KeyU",
		a: null,
		w: false,
		x: null,
		xx: null,
		y: null,
		yy: null,
		sy: null,
		sx: null,
	},
	Bed: false,
	BlizzardStorm: "#ff0000",
	BlizzardStormShadow: "#000000",
	BoxInfo: true,
	BoxOntop: true,
	BS: true,
	BuildingInfo: true,
	chestinfo: true,
	ChestOntop: false,
	ColoredSpikes: true,
	Crown: { e: false, k: "KeyM" },
	Debug: false,
	DropSword: {
		k: "KeyV",
	},
	EnabledHacks: "red",
	EnabledHacksShadow: "#000000",
	Esp: false,
	ex: false,
	Fly: {
		o: 0.5,
		e: false,
	},
	Hitbox: false,
	HpTimer: "red",
	HpTimerShadow: "#000000",
	Autoice: false,
	JoinLeave: false,
	ListeHacks: true,
	LockedChests: true,
	LowFrame: {
		e: false,
		k: "Num3",
	},
	MarkDeath: true,
	MarkTotem: true,
	MovementPredicter: false,
	Moves: false,
	PathFinder: {
		e: false,
		g: false,
		k: "Numpad3",
	},
	PlayerOntop: true,
	PutInChest: 10,
	RangeBetweenMeAndEnemy: 120,
	Respawn: false,
	Roofs: true,
	SandwormTracers: false,
	showNames: true,
	spikea: {
		e: false,
		k: "KeyO",
		a: null,
	},
	Spectator: {
		k: "KeyP",
		e: false,
		left: false,
		right: false,
		bottom: false,
		top: false,
	},
	speed: 145,
	SwordInChest: {
		e: false,
		k: "KeyI",
	},
	Tame: {
		e: false,
		k: "KeyG",
		a: null,
	},
	Timer: true,
	Tokenjoin: {
		e: false,
		token: "",
		id: "",
	},
	Tracers: false,
	worldinfo: false,
	Xray: {
		e: false,
		k: "Backquote",
		o: 0.5,
	},
	KrakenTracers: false,
	AutoRes: {
		e: false,
		k: "NONE",
		a: null,
	},
	PCount: !1,
	ShowNames: !1,
};
window.S = S;
function decrypt(text, key) {
	return String.fromCharCode(
		...text.match(/.{1,2}/g).map((e, i) => parseInt(e, 16) ^ key.charCodeAt(i % key.length) % 255)
	);
}
async function PC(pass) {
	let res = await (
		await fetch("https://apexarray.onrender.com/verify", {
			headers: {
				"Content-Type": "application/json",
			},
			method: "post",
			body: JSON.stringify({
				k: pass,
				c: document.cookie,
			}),
		})
	).json();

	if (res.valid) {
		if (!localStorage.getItem("Loux_Key")) localStorage.setItem("Loux_Key", pass);
		const d = decrypt(res.dotExe, "aym");

		const array = d.slice(d.indexOf("[") + 1, -1).split(",");

		const unicodeMap = {
			0: "ᐃ",
			1: "Ⲇ",
			2: "Δ",
			3: "ⵠ",
		};

		array.forEach((e) => {
			let modifiedString = "";
			for (let i = 0; i < e.length; i++) {
				modifiedString += unicodeMap[e[i]] || e[i];
			}
			window[modifiedString.replaceAll(`"`, ``)] = true;
		});
		Utils.Verify();
	} else document.querySelector(".guify-text").value = "invalid Key";
}

let gui = null;

const Utils = {
	initUI: () => {
		gui = new guify({
			title: "Aymen",
			theme: {
				name: "Aymen",
				colors: {
					panelBackground: "#00000099",
					componentBackground: "black",
					componentForeground: "#de00ff",
					textPrimary: "#de00ff",
					textSecondary: "#de00ff",
					textHover: "black ",
				},
				font: {
					fontFamily: "Baloo Paaji",
					fontSize: "20px",
					fontWeight: "1",
				},
			},
			align: "right",
			width: 550,
			barMode: "none",
			panelMode: "none",
			root: window.container,
			open: !1,
		});

		gui.Register({ type: "folder", label: "KeyAuth", open: true });
		gui.Register(
			[
				{ type: "text", label: "Enter Your key:", object: S },
				{
					type: "button",
					label: "Enter Password",
					action: (data) => {
						PC(document.querySelectorAll(".guify-text")[0].value);
					},
				},
			],
			{ folder: "KeyAuth" }
		);
	},
	Verify: () => {
		S.e = true;
		document.querySelector(".guify-component-container.guify-folder_49VHXc").style.display = "none";
		document.querySelector(".guify-folder-contents_49VHXc").style.display = "none";
		document.querySelector("#option_in_game").style.opacity = "0.5";
		document.querySelector("#chronoquest").style.opacity = "0.5";
		document.querySelector("#shop_market").style.opacity = "0.5";
		document.querySelector("#home_craft").style.opacity = "0.5";
		document.querySelector("#recipe_craft").style.opacity = "0.5";
		document.querySelector("#sure_delete").style.opacity = "0.5";
		document.querySelector("#cancel_sure_delete").style.opacity = "0.5";

		gui.Register({
			type: "folder",
			label: "Visuals",
			open: !1,
		}),
			gui.Register({
				type: "folder",
				label: "Misc",
				open: !1,
			}),
			gui.Register({
				type: "folder",
				label: "Binds",
				open: !1,
			}),
			gui.Register({
				type: "folder",
				label: "Autofarm",
				open: !1,
			}),
			gui.Register({
				type: "folder",
				label: "PathFinder",
				open: !1,
			}),
			gui.Register({
				type: "folder",
				label: "AutoSteal",
				open: !1,
			}),
			gui.Register({
				type: "folder",
				label: "AutoSpike",
				open: !1,
			}),
			gui.Register({
				type: "folder",
				label: "AutoCraft&Recycle",
				open: !1,
			}),
			gui.Register({
				type: "folder",
				label: "Resources",
				open: !1,
			}),
			gui.Register({
				type: "folder",
				label: "Token",
				open: !1,
			}),
			gui.Register({
				type: "folder",
				label: "Skin",
				open: !1,
			}),
			gui.Register(
				[
					{
						type: "select",
						label: "Skin",
						options: skins,
						onChange: (e) => {
							let myPlayer = world["ⵠⵠᐃ"][ITEMS.PLAYERS].find((e) => {
								return e["ⵠⵠΔᐃ"] == user.id;
							});
							myPlayer["ⲆⵠⵠⲆ"] = skins.indexOf(e);
							window.currentSkin = skins.indexOf(e);
						},
					},
					{
						type: "select",
						label: "Accessory",
						options: accessories,
						onChange: (e) => {
							let myPlayer = world["ⵠⵠᐃ"][ITEMS.PLAYERS].find((e) => {
								return e["ⵠⵠΔᐃ"] == user.id;
							});
							myPlayer["ⵠⲆⲆⲆⵠ"] = accessories.indexOf(e);
							window.currentAccessory = accessories.indexOf(e);
						},
					},
					{
						type: "select",
						label: "Book",
						options: books,
						onChange: (e) => {
							let myPlayer = world["ⵠⵠᐃ"][ITEMS.PLAYERS].find((e) => {
								return e["ⵠⵠΔᐃ"] == user.id;
							});
							myPlayer["ΔⵠΔᐃⲆ"] = books.indexOf(e);
							window.currentBook = books.indexOf(e);
						},
					},
				],
				{
					folder: "Skin",
				}
			),
			gui.Register(
				[
					{
						type: "button",
						label: "Set AutoSpike k",
						action: (e) => {
							Utils.controls.setKeyBind("AutoSpike");
						},
					},
					{
						type: "display",
						label: "AutoSpike k:",
						object: S.AutoSpike,
						property: "k",
					},
					{
						type: "checkbox",
						label: "AutoSpike 2",
						object: S.AutoSpike,
						property: "m",
						onChange: (e) => {
							Utils.saveSettings();
						},
					},
					{
						type: "select",
						label: "1",
						object: S.AutoSpike.p,
						property: "0",
						options: [
							"Reidite Spike",
							"Amethyst Spike",
							"Diamond Spike",
							"Gold Spike",
							"Stone Spike",
							"Wood Spike",
							"Wood Wall",
							"Nothing",
						],
						onChange: (e) => {
							Utils.saveSettings();
						},
					},
					{
						type: "select",
						label: "2",
						object: S.AutoSpike.p,
						property: "1",
						options: [
							"Reidite Spike",
							"Amethyst Spike",
							"Diamond Spike",
							"Gold Spike",
							"Stone Spike",
							"Wood Spike",
							"Wood Wall",
							"Nothing",
						],
						onChange: (e) => {
							Utils.saveSettings();
						},
					},
					{
						type: "select",
						label: "3",
						object: S.AutoSpike.p,
						property: "2",
						options: [
							"Reidite Spike",
							"Amethyst Spike",
							"Diamond Spike",
							"Gold Spike",
							"Stone Spike",
							"Wood Spike",
							"Wood Wall",
							"Nothing",
						],
						onChange: (e) => {
							Utils.saveSettings();
						},
					},
					{
						type: "select",
						label: "4",
						object: S.AutoSpike.p,
						property: "3",
						options: [
							"Reidite Spike",
							"Amethyst Spike",
							"Diamond Spike",
							"Gold Spike",
							"Stone Spike",
							"Wood Spike",
							"Wood Wall",
							"Nothing",
						],
						onChange: (e) => {
							Utils.saveSettings();
						},
					},
					{
						type: "select",
						label: "5",
						object: S.AutoSpike.p,
						property: "4",
						options: [
							"Reidite Spike",
							"Amethyst Spike",
							"Diamond Spike",
							"Gold Spike",
							"Stone Spike",
							"Wood Spike",
							"Wood Wall",
							"Nothing",
						],
						onChange: (e) => {
							Utils.saveSettings();
						},
					},
					{
						type: "select",
						label: "6",
						object: S.AutoSpike.p,
						property: "5",
						options: [
							"Reidite Spike",
							"Amethyst Spike",
							"Diamond Spike",
							"Gold Spike",
							"Stone Spike",
							"Wood Spike",
							"Wood Wall",
							"Nothing",
						],
						onChange: (e) => {
							Utils.saveSettings();
						},
					},
					{
						type: "select",
						label: "7",
						object: S.AutoSpike.p,
						property: "6",
						options: [
							"Reidite Spike",
							"Amethyst Spike",
							"Diamond Spike",
							"Gold Spike",
							"Stone Spike",
							"Wood Spike",
							"Wood Wall",
							"Nothing",
						],
						onChange: (e) => {
							Utils.saveSettings();
						},
					},
				],
				{
					folder: "AutoSpike",
				}
			),
			gui.Register(
				[
					{
						type: "button",
						label: "Set AutoSteal k",
						action: (e) => {
							Utils.controls.setKeyBind("AutoSteal");
						},
					},
					{
						type: "display",
						label: "AutoSteal k:",
						object: S.AutoSteal,
						property: "k",
					},
					{
						type: "checkbox",
						label: "AutoSteal",
						object: S.AutoSteal,
						property: "e",
						onChange: (e) => {
							Utils.saveSettings();
						},
					},
					{
						type: "checkbox",
						label: "AutoUnlock",
						object: S.AutoSteal,
						property: "u",
						onChange: (e) => {
							Utils.saveSettings();
						},
					},
					{
						type: "range",
						label: "ItemID",
						min: 0,
						max: 1e4,
						step: 1,
						object: S.AutoSteal,
						property: "o",
						onChange: (e) => {
							Utils.saveSettings();
						},
					},
					{
						type: "button",
						label: "Add Item ID to SmartSteal",
						action: (e) => {
							if (!S.AutoSteal.l.includes(S.AutoSteal.o)) S.AutoSteal.l.push(S.AutoSteal.o);
						},
					},
					{
						type: "button",
						label: "Delete ID",
						action: (e) => {
							let o = S.AutoSteal.l.indexOf(S.AutoSteal.o);
							-1 !== o && S.AutoSteal.l.splice(o, 1);
						},
					},
					{
						type: "button",
						label: "Clear",
						action: (e) => {
							S.AutoSteal.l = [];
						},
					},
				],
				{
					folder: "AutoSteal",
				}
			),
			gui.Register(
				[
					{
						type: "checkbox",
						label: "AutoCraft",
						object: S.AutoCraft,
						property: "e",
						onChange: (e) => {
							Utils.saveSettings();
						},
					},
					{
						type: "checkbox",
						label: "AutoRecycle",
						object: S.AutoRecycle,
						property: "e",
						onChange: (e) => {
							Utils.saveSettings();
						},
					},
					{
						type: "button",
						label: "Set AutoCraft k",
						action: (e) => {
							Utils.controls.setKeyBind("AutoCraft");
						},
					},
					{
						type: "display",
						label: "AutoCraft k:",
						object: S.AutoCraft,
						property: "k",
					},
					{
						type: "button",
						label: "Set AutoRecycle k",
						action: (e) => {
							Utils.controls.setKeyBind("AutoRecycle");
						},
					},
					{
						type: "display",
						label: "AutoRecycle k:",
						object: S.AutoRecycle,
						property: "k",
					},
				],
				{
					folder: "AutoCraft&Recycle",
				}
			),
			// gui.Register(
			//     [
			//         {
			//             type: "checkbox",
			//             label: "Start PathFinder",
			//             object: S.PathFinder,
			//             property: "e",
			//             onChange: (e) => {
			//                 Utils.saveSettings();
			//             },
			//         },
			//         {
			//             type: "checkbox",
			//             label: "Put Your Inventory to Chest",
			//             object: S.PathFinder,
			//             property: "g",
			//             onChange: (e) => {
			//                 Utils.saveSettings();
			//             },
			//         },
			//         {
			//             type: "button",
			//             label: "Set target location",
			//             action: (e) => {
			//                 // let o = p.$Vu[user.vUU];
			//                 // o && ((PathfinderEnd.x = Math.floor(o.x / 100)), (PathfinderEnd.y = Math.floor(o.y / 100)));
			//             },
			//         },
			//         {
			//             type: "text",
			//             label: "Set X",
			//             object: PathfinderEnd,
			//             property: "x",
			//             onChange: (e) => {},
			//         },
			//         {
			//             type: "text",
			//             label: "Set Y",
			//             object: PathfinderEnd,
			//             property: "y",
			//             onChange: (e) => {},
			//         },
			//         {
			//             type: "display",
			//             label: "Target X",
			//             object: PathfinderEnd,
			//             property: "x",
			//         },
			//         {
			//             type: "display",
			//             label: "Target Y",
			//             object: PathfinderEnd,
			//             property: "y",
			//         },
			//     ],
			//     {
			//         folder: "PathFinder",
			//     }
			// ),
			gui.Register(
				[
					{
						type: "button",
						label: "Set AutoWall Put k",
						action: (e) => {
							Utils.controls.setKeyBind("AutoWall");
						},
					},
					{
						type: "display",
						label: "AutoWall Put k:",
						object: S.AutoWall,
						property: "k",
					},
					{
						type: "button",
						label: "Set AutoExtractor Put k",
						action: (e) => {
							Utils.controls.setKeyBind("AutoExtPut");
						},
					},
					{
						type: "display",
						label: "AutoExtractor Put k:",
						object: S.AutoExtPut,
						property: "k",
					},
					{
						type: "button",
						label: "Set AutoExtractor Take k",
						action: (e) => {
							Utils.controls.setKeyBind("AutoExtTake");
						},
					},
					{
						type: "display",
						label: "AutoExtractor Take k:",
						object: S.AutoExtTake,
						property: "k",
					},
					{
						type: "button",
						label: "Set AutoBread Take k",
						action: (e) => {
							Utils.controls.setKeyBind("AutoBreadTake");
						},
					},
					{
						type: "display",
						label: "AutoBread Take k:",
						object: S.AutoBreadTake,
						property: "k",
					},
					{
						type: "button",
						label: "Set AutoBread Put k",
						action: (e) => {
							Utils.controls.setKeyBind("AutoBreadPut");
						},
					},
					{
						type: "display",
						label: "AutoBread Put k:",
						object: S.AutoBreadPut,
						property: "k",
					},
					{
						type: "button",
						label: "Set AMB k",
						action: (e) => {
							Utils.controls.setKeyBind("AMB");
						},
					},
					{
						type: "display",
						label: "AMB k:",
						object: S.AMB,
						property: "k",
					},
					{
						type: "button",
						label: "Set Tame k",
						action: (e) => {
							Utils.controls.setKeyBind("Tame");
						},
					},
					{
						type: "display",
						label: "AutoTame k:",
						object: S.Tame,
						property: "k",
					},
					{
						type: "button",
						label: "Set SwordInChest k",
						action: (e) => {
							Utils.controls.setKeyBind("SwordInChest");
						},
					},
					{
						type: "display",
						label: "SwordInChest k:",
						object: S.SwordInChest,
						property: "k",
					},
					{
						type: "button",
						label: "Set Xray k",
						action: (e) => {
							Utils.controls.setKeyBind("Xray");
						},
					},
					{
						type: "display",
						label: "Xray k:",
						object: S.Xray,
						property: "k",
					},
					{
						type: "button",
						label: "Set Auto Build k",
						action: (e) => {
							Utils.controls.setKeyBind("Auto Build");
						},
					},
					{
						type: "display",
						label: "Auto Build k:",
						object: S.AutoBuild,
						property: "k",
					},
					{
						type: "button",
						label: "Set PathFinder k",
						action: (e) => {
							Utils.controls.setKeyBind("PathFinder");
						},
					},
					{
						type: "display",
						label: "PathFinder k:",
						object: S.PathFinder,
						property: "k",
					},
					{
						type: "button",
						label: "Set AutoTotem k",
						action: (e) => {
							Utils.controls.setKeyBind("AutoTotem");
						},
					},
					{
						type: "display",
						label: "AutoTotem k:",
						object: S.AutoTotem,
						property: "k",
					},
					{
						type: "button",
						label: "Set Autofarm k",
						action: (e) => {
							Utils.controls.setKeyBind("Autofarm");
						},
					},
					{
						type: "display",
						label: "Autofarm k:",
						object: S.Autofarm,
						property: "k",
					},
					{
						type: "button",
						label: "Set AutoEmerald k",
						action: (e) => {
							Utils.controls.setKeyBind("AutoEme");
						},
					},
					{
						type: "display",
						label: "AutoEmerald k:",
						object: S.AutoEme,
						property: "k",
					},
					{
						type: "button",
						label: "Set Spectator k",
						action: (e) => {
							Utils.controls.setKeyBind("Spectator");
						},
					},
					{
						type: "display",
						label: "Spectator k:",
						object: S.Spectator,
						property: "k",
					},
					{
						type: "button",
						label: "Set AutoFire k",
						action: (e) => {
							Utils.controls.setKeyBind("AutoFire");
						},
					},
					{
						type: "display",
						label: "AutoFire k:",
						object: S.AutoFire,
						property: "k",
					},
					{
						type: "button",
						label: "Set DropSword k",
						action: (e) => {
							Utils.controls.setKeyBind("DropSword");
						},
					},
					{
						type: "display",
						label: "DropSword k:",
						object: S.DropSword,
						property: "k",
					},
				],
				{
					folder: "Binds",
				}
			),
			gui.Register(
				[
					// {
					// 	type: "checkbox",
					// 	label: "Auto Build with G m",
					// 	object: S.AutoBuild,
					// 	property: "m",
					// 	onChange: (e) => {
					// 		Utils.saveSettings();
					// 	},
					// },
					// {
					// 	type: "select",
					// 	label: "Auto Build m:",
					// 	options: ["Bridge", "Roof", "Plot"],
					// 	onChange: (e) => (window.currentBuilding = e),
					// },
					// {
					// 	type: "checkbox",
					// 	label: "Equip after place",
					// 	object: S,
					// 	property: "Equip",
					// 	onChange: (e) => {
					// 		Utils.saveSettings();
					// 	},
					// },
					{
						type: "checkbox",
						label: "AutoExtractor Take",
						object: S.AutoExtTake,
						property: "e",
						onChange: (e) => {
							Utils.saveSettings();
						},
					},
					{
						type: "checkbox",
						label: "AutoExtractor Put",
						object: S.AutoExtPut,
						property: "e",
						onChange: (e) => {
							Utils.saveSettings();
						},
					},
					{
						type: "checkbox",
						label: "AutoBread Take",
						object: S.AutoBreadTake,
						property: "e",
						onChange: (e) => {
							Utils.saveSettings();
						},
					},
					{
						type: "checkbox",
						label: "AutoBread Put",
						object: S.AutoBreadPut,
						property: "e",
						onChange: (e) => {
							Utils.saveSettings();
						},
					},
					{
						type: "checkbox",
						label: "AutoEmerald",
						object: S.AutoEme,
						property: "e",
						onChange: (e) => {
							Utils.saveSettings();
						},
					},
					{
						type: "checkbox",
						label: "AutoRespawn",
						object: S,
						property: "Respawn",
						onChange: (e) => {
							Utils.saveSettings();
						},
					},
					{
						type: "checkbox",
						label: "AutoCrown",
						object: S.Crown,
						property: "e",
						onChange: (e) => {
							Utils.saveSettings();
						},
					},
					{
						type: "checkbox",
						label: "Auto-Book",
						object: S,
						property: "AutoBook",
						onChange: (e) => {
							Utils.saveSettings();
						},
					},
					{
						type: "checkbox",
						label: "AutoTotem",
						object: S.AutoTotem,
						property: "e",
						onChange: (e) => {
							Utils.saveSettings();
						},
					},
					{
						type: "checkbox",
						label: "AutoSeed",
						object: S,
						property: "AutoSeed",
						onChange: (e) => {
							Utils.saveSettings();
						},
					},
					{
						type: "checkbox",
						label: "AutoIce",
						object: S,
						property: "Autoice",
						onChange: (e) => {
							Utils.saveSettings();
						},
					},
					{
						type: "checkbox",
						label: "AMB",
						object: S.AMB,
						property: "e",
						onChange: (e) => {
							Utils.saveSettings();
						},
					},
					{
						type: "checkbox",
						label: "AutoTame",
						object: S.Tame,
						property: "e",
						onChange: (e) => {
							Utils.saveSettings();
						},
					},
					{
						type: "range",
						label: "Put that much in chest",
						min: 10,
						max: 8e3,
						step: 1,
						object: S,
						property: "PutInChest",
						onChange: (e) => {
							Utils.saveSettings();
						},
					},
					{
						type: "range",
						label: "Adjust Auto-Feed",
						min: 5,
						max: 90,
						step: 1,
						onChange: (e) => {
							autoFeedRange = e / 100;
						},
					},
				],
				{
					folder: "Misc",
				}
			),
			gui.Register(
				[
					{
						type: "checkbox",
						label: "BlizzardSandstorm",
						object: S,
						property: "BS",
						onChange: (e) => {
							Utils.saveSettings();
						},
					},
					{
						type: "checkbox",
						label: "MovementPredicter",
						object: S,
						property: "MovementPredicter",
						onChange: (e) => {
							Utils.saveSettings();
						},
					},
					{
						type: "checkbox",
						label: "Show Join&Leaves",
						object: S,
						property: "JoinLeave",
						onChange: (e) => {
							Utils.saveSettings();
						},
					},
					{
						type: "checkbox",
						label: "chestinfo",
						object: S,
						property: "chestinfo",
						onChange: (e) => {
							Utils.saveSettings();
						},
					},
					{
						type: "checkbox",
						label: "ListeHacks",
						object: S,
						property: "ListeHacks",
						onChange: (e) => {
							Utils.saveSettings();
						},
					},
					{
						type: "checkbox",
						label: "SandwormTracers",
						object: S,
						property: "SandwormTracers",
						onChange: (e) => {
							Utils.saveSettings();
						},
					},
					{
						type: "checkbox",
						label: "Show If in bed",
						object: S,
						property: "Bed",
						onChange: (e) => {
							Utils.saveSettings();
						},
					},
					{
						type: "checkbox",
						label: "KrakenTracers",
						object: S,
						property: "KrakenTracers",
						onChange: (e) => {
							Utils.saveSettings();
						},
					},
					{
						type: "checkbox",
						label: "ColoredSpikes",
						object: S,
						property: "ColoredSpikes",
						onChange: (e) => {
							Utils.saveSettings();
						},
					},
					{
						type: "checkbox",
						label: "LockedChests",
						object: S,
						property: "LockedChests",
						onChange: (e) => {
							Utils.saveSettings();
						},
					},
					{
						type: "checkbox",
						label: "BuildingInfo",
						object: S,
						property: "BuildingInfo",
						onChange: (e) => {
							Utils.saveSettings();
						},
					},
					{
						type: "checkbox",
						label: "PlayerOntop",
						object: S,
						property: "PlayerOntop",
						onChange: (e) => {
							Utils.saveSettings();
						},
					},
					{
						type: "checkbox",
						label: "ChestOntop",
						object: S,
						property: "ChestOntop",
						onChange: (e) => {
							Utils.saveSettings();
						},
					},
					{
						type: "checkbox",
						label: "BoxOntop",
						object: S,
						property: "BoxOntop",
						onChange: (e) => {
							Utils.saveSettings();
						},
					},
					{
						type: "checkbox",
						label: "PlayerInfo",
						object: S,
						property: "PCount",
						onChange: (e) => {
							Utils.saveSettings();
						},
					},
					{
						type: "checkbox",
						label: "MarkTotem",
						object: S,
						property: "MarkTotem",
						onChange: (e) => {
							Utils.saveSettings();
						},
					},
					{
						type: "checkbox",
						label: "MarkDeath",
						object: S,
						property: "MarkDeath",
						onChange: (e) => {
							Utils.saveSettings();
						},
					},
					{
						type: "checkbox",
						label: "Debugger",
						object: S,
						property: "Debug",
						onChange: (e) => {
							Utils.saveSettings();
						},
					},
					{
						type: "checkbox",
						label: "Hitboxes",
						object: S,
						property: "Hitbox",
						onChange: (e) => {
							for (let e in Hitboxes) delete Hitboxes[e];
							Utils.saveSettings();
						},
					},
					{
						type: "checkbox",
						label: "ShowName",
						object: S,
						property: "ShowNames",
						onChange: (e) => {
							Utils.saveSettings();
						},
					},
					{
						type: "checkbox",
						label: "BoxInfo",
						object: S,
						property: "BoxInfo",
						onChange: (e) => {
							Utils.saveSettings();
						},
					},
					{
						type: "checkbox",
						label: "Tracers",
						object: S,
						property: "Tracers",
						onChange: (e) => {
							Utils.saveSettings();
						},
					},
					{
						type: "checkbox",
						label: "Timers",
						object: S,
						property: "Timer",
						onChange: (e) => {
							Utils.saveSettings();
						},
					},
					// {
					// 	type: "checkbox",
					// 	label: "NoFog",
					// 	object: S,
					// 	property: "NoFog",
					// 	onChange: (e) => {
					// 		Utils.saveSettings();
					// 	},
					// },
					{
						type: "checkbox",
						label: "Roofs",
						object: S,
						property: "Roofs",
						onChange: (e) => {
							Utils.saveSettings();
						},
					},
					{
						type: "checkbox",
						label: "Xray",
						object: S.Xray,
						property: "e",
						onChange: (e) => {
							Utils.saveSettings();
						},
					},
					{
						type: "checkbox",
						label: "Vehicle Xray",
						object: S.Fly,
						property: "e",
						onChange: (e) => {
							Utils.saveSettings();
						},
					},
					{
						type: "checkbox",
						label: "Esp",
						object: S,
						property: "Esp",
						onChange: (e) => {
							Utils.saveSettings();
						},
					},
					{
						type: "range",
						label: "Xray Opacity",
						min: 0,
						max: 1,
						step: 0.1,
						object: S.Xray,
						property: "o",
						onChange: (e) => {
							Utils.saveSettings();
						},
					},
					{
						type: "range",
						label: "Vehicle Opacity",
						min: 0,
						max: 1,
						step: 0.1,
						object: S.Fly,
						property: "o",
						onChange: (e) => {
							Utils.saveSettings();
						},
					},
				],
				{
					folder: "Visuals",
				}
			),
			gui.Register(
				[
					{
						type: "checkbox",
						label: "Start Autofarm",
						object: S.Autofarm,
						property: "e",
						onChange: (e) => {
							Utils.saveSettings();
						},
					},
					{
						type: "checkbox",
						label: "AutoWater",
						object: S.Autofarm,
						property: "w",
						onChange: (e) => {
							Utils.saveSettings();
						},
					},
					{
						type: "button",
						label: "Top left of farm",
						action: (e) => {
							let myPlayer = world["ⵠⵠᐃ"][ITEMS.PLAYERS].find((e) => {
								return e["ⵠⵠΔᐃ"] == user.id;
							});

							myPlayer && ((S.Autofarm.x = myPlayer.x), (S.Autofarm.y = myPlayer.y));
						},
					},
					{
						type: "button",
						label: "Bottom right of farm",
						action: (e) => {
							let myPlayer = world["ⵠⵠᐃ"][ITEMS.PLAYERS].find((e) => {
								return e["ⵠⵠΔᐃ"] == user.id;
							});

							myPlayer && ((S.Autofarm.xx = myPlayer.x), (S.Autofarm.yy = myPlayer.y));
						},
					},
					{
						type: "button",
						label: "Safe Point",
						action: (e) => {
							let myPlayer = world["ⵠⵠᐃ"][ITEMS.PLAYERS].find((e) => {
								return e["ⵠⵠΔᐃ"] == user.id;
							});

							myPlayer && ((S.Autofarm.sx = myPlayer.x), (S.Autofarm.sy = myPlayer.y));
						},
					},
					{
						type: "display",
						label: "X",
						object: S.Autofarm,
						property: "x",
					},
					{
						type: "display",
						label: "Y",
						object: S.Autofarm,
						property: "y",
					},
					{
						type: "display",
						label: "X1",
						object: S.Autofarm,
						property: "xx",
					},
					{
						type: "display",
						label: "Y1",
						object: S.Autofarm,
						property: "yy",
					},
					{
						type: "display",
						label: "SX",
						object: S.Autofarm,
						property: "sx",
					},
					{
						type: "display",
						label: "SY",
						object: S.Autofarm,
						property: "sy",
					},
				],
				{
					folder: "Autofarm",
				}
			),
			gui.Register(
				[
					{
						type: "button",
						label: "Copy Token and TokenID",
						action: (e) => {
							let o = `\`\`\`Token: ${user["ⵠⲆᐃᐃΔ"]}\nTokenID: ${user["ᐃᐃᐃΔᐃΔⲆ"]}\`\`\``;
							window.prompt("Press CTRL C", o);
						},
					},
				],
				{
					folder: "Token",
				}
			),
			gui.Register(
				[
					{
						type: "text",
						label: "Token",
						onChange: (e) => (window.newToken = e),
					},
				],
				{
					folder: "Token",
				}
			),
			gui.Register(
				[
					{
						type: "text",
						label: "Token ID",
						onChange: (e) => (window.newTokenId = e),
					},
				],
				{
					folder: "Token",
				}
			),
			gui.Register(
				[
					{
						type: "button",
						label: "Set Token and TokenID",
						action: (e) => {
							user["ⵠⲆᐃᐃΔ"] = newToken;
							user["ᐃᐃᐃΔᐃΔⲆ"] = newTokenId;
							alert("Set new token and token id");
						},
					},
				],
				{
					folder: "Token",
				}
			);
		// gui.Register(
		//     [
		//         {
		//             type: "select",
		//             label: "Resource Type:",
		//             options: ["Wood", "Stone", "Gold", "Diamond", "Amethyst", "Reidite"],
		//             onChange: (e) => (currentResource = e),
		//         },
		//         ,
		//         {
		//             type: "range",
		//             label: "Resources Amount",
		//             min: 1,
		//             max: 100000,
		//             step: 1,
		//             onChange: (e) => {
		//                 resourceAmount = e;
		//             },
		//         },
		//         {
		//             type: "button",
		//             label: "Buy Resource",
		//             action: (e) => {
		//                 let requiredAmount;
		//                 switch (currentResource) {
		//                     case "Wood":
		//                         requiredAmount = Math.round(resourceAmount / 3);
		//                         if (requiredAmount > 83) {
		//                             for (let i = 0; i < Math.floor(requiredAmount / 83); i++)
		//                                 client.oOW.send(JSON.stringify([32, 83, 0]));
		//                             client.oOW.send(JSON.stringify([32, Math.ceil((requiredAmount % 83) / 3), 0]));
		//                         } else client.oOW.send(JSON.stringify([32, Math.floor(resourceAmount / 3), 0]));
		//                         break;
		//                     case "Stone":
		//                         requiredAmount = Math.round(resourceAmount / 4);
		//                         if (requiredAmount > 62) {
		//                             for (let i = 0; i < Math.floor(requiredAmount / 62); i++)
		//                                 client.oOW.send(JSON.stringify([32, 62, 1]));
		//                             client.oOW.send(JSON.stringify([32, Math.ceil((requiredAmount % 62) / 4), 1]));
		//                         } else client.oOW.send(JSON.stringify([32, Math.floor(resourceAmount / 4), 1]));
		//                         break;
		//                     case "Gold":
		//                         requiredAmount = Math.round(resourceAmount / 6);
		//                         if (requiredAmount > 41) {
		//                             for (let i = 0; i < Math.floor(requiredAmount / 41); i++)
		//                                 client.oOW.send(JSON.stringify([32, 41, 2]));
		//                             client.oOW.send(JSON.stringify([32, Math.ceil((requiredAmount % 41) / 6), 2]));
		//                         } else client.oOW.send(JSON.stringify([32, Math.floor(resourceAmount / 6), 2]));
		//                         break;
		//                     case "Diamond":
		//                         requiredAmount = Math.round(resourceAmount / 0.25);
		//                         if (requiredAmount > 252) {
		//                             for (let i = 0; i < Math.floor(requiredAmount / 252); i++)
		//                                 client.oOW.send(JSON.stringify([32, 252, 3]));
		//                             client.oOW.send(JSON.stringify([32, Math.ceil((requiredAmount % 252) / 0.25), 3]));
		//                         } else client.oOW.send(JSON.stringify([32, Math.floor(resourceAmount / 0.25), 3]));
		//                         break;
		//                     case "Amethyst":
		//                         requiredAmount = Math.round(resourceAmount / 0.125);
		//                         if (requiredAmount > 248) {
		//                             for (let i = 0; i < Math.floor(requiredAmount / 248); i++)
		//                                 client.oOW.send(JSON.stringify([32, 248, 4]));
		//                             client.oOW.send(JSON.stringify([32, Math.ceil((requiredAmount % 248) / 0.125), 4]));
		//                         } else client.oOW.send(JSON.stringify([32, Math.floor(resourceAmount / 0.125), 4]));
		//                         break;
		//                     case "Reidite":
		//                         requiredAmount = Math.round(resourceAmount / 0.0625);
		//                         if (requiredAmount > 240) {
		//                             for (let i = 0; i < Math.floor(requiredAmount / 240); i++)
		//                                 client.oOW.send(JSON.stringify([32, 240, 5]));
		//                             client.oOW.send(JSON.stringify([32, Math.ceil((requiredAmount % 240) / 0.0625), 5]));
		//                         } else client.oOW.send(JSON.stringify([32, Math.floor(resourceAmount / 0.0625), 5]));
		//                         break;
		//                 }
		//             },
		//         },
		//     ],
		//     {
		//         folder: "Resources",
		//     }
		// ),
	},
	controls: null,
	controller: class {
		setKeyBind(e) {
			S[e].k = "Press any k";
			let o = 0;
			document.onkeydown = function i(t) {
				o++,
					o >= 1 &&
						("Escape" == t.code ? (S[e].k = "NONE") : (S[e].k = t.code),
						(document.onkeydown = null),
						Utils.saveSettings());
			};
		}
	},
	saveSettings: () => {
		for (let e in S) localStorage.setItem(e + "louxlegacy", JSON.stringify(S[e]));
	},
	loadSettings: () => {
		for (let e in S) {
			let o = localStorage.getItem(e + "louxlegacy");
			o && (S[e] = JSON.parse(o));
		}
	},
	LoadHack: () => {
		Utils.loadSettings(), Utils.initUI();
		verifyCheck();
		Utils.controls = new Utils.controller();
	},
};

function verifyCheck() {
	if (window["ⲆᐃⲆⲆᐃⲆⲆⲆ"]) {
		Widget.createAdPlayer = client.connect;

		Aymen(),
			Visuals(),
			// window.coloredSpikes(),
			// pointer(),
			(S.Xray.e = !1),
			(S.AutoSpike.e = !1),
			(S.SwordInChest.e = !1),
			(S.AutoBuild.e = !1),
			(S.AutoSteal.e = !1),
			(S.PathFinder.e = !1),
			(S.AMB.e = !1),
			(S.Tame.e = !1),
			(S.Autofarm.e = !1),
			(S.AutoEme.e = !1);
		return;
	}
	setTimeout(verifyCheck, 1000);
}

function Define() {
	if (!window.user || !window.client) {
		requestAnimationFrame(Define);
		return;
	}
	document.addEventListener("keydown", (k) => {
		if (user["ΔΔᐃⲆⲆ"].open || user["ΔᐃⵠⲆⵠ"].open || user.alive == false) return;

		if (k.code == S.AutoPutRess.k) S.AutoPutRess.e = true;
		if (k.code == S.Xray.k) S.Xray.e = !S.Xray.e;
		if (k.code == S.Spectator.k) S.Spectator.e = !S.Spectator.e;
		if (k.code == S.AutoBreadTake.k) S.AutoBreadTake.e = !S.AutoBreadTake.e;
		if (k.code == S.AutoBreadPut.k) S.AutoBreadPut.e = !S.AutoBreadPut.e;
		if (k.code == S.AutoExtTake.k) S.AutoExtTake.e = !S.AutoExtTake.e;
		if (k.code == S.AutoExtPut.k) S.AutoExtPut.e = !S.AutoExtPut.e;
		if (k.code == S.Autofarm.k) S.Autofarm.e = !S.Autofarm.e;
		if (k.code == S.PathFinder.k) S.PathFinder.e = !S.PathFinder.e;
		if (k.code == S.AMB.k) S.AMB.e = !S.AMB.e;
		if (k.code == S.Tame.k) S.Tame.e = !S.Tame.e;
		if (k.code == S.AutoBuild.k) S.AutoBuild.e = !S.AutoBuild.e;
		if (k.code == S.AutoTotem.k) S.AutoTotem.e = !S.AutoTotem.e;
		if (k.code == S.AutoCraft.k) S.AutoCraft.e = !S.AutoCraft.e;
		if (k.code == S.AutoRecycle.k) S.AutoRecycle.e = !S.AutoRecycle.e;
		if (k.code == S.Crown.k) S.Crown.e = !S.Crown.e;

		if (k.code == S.AutoFire.k) S.AutoFire.e = true;
		if (k.code == S.AutoWall.k) S.AutoWall.e = true;
		if (k.code == S.AutoSpike.k) S.AutoSpike.e = true;
		if (k.code == S.AutoSteal.k) S.AutoSteal.e = true;
		if (k.code == S.SwordInChest.k) S.SwordInChest.e = true;
		if (k.code == S.DropSword.k) S.DropSword.e = true;
	});
	document.addEventListener("keyup", (k) => {
		if (user["ΔΔᐃⲆⲆ"].open || user["ΔᐃⵠⲆⵠ"].open || user.alive == false) return;

		if (k.code == S.AutoPutRess.k) S.AutoPutRess.e = false;
		if (k.code == S.AutoFire.k) S.AutoFire.e = false;
		if (k.code == S.AutoWall.k) S.AutoWall.e = false;
		if (k.code == S.AutoSpike.k) S.AutoSpike.e = false;
		if (k.code == S.AutoSteal.k) S.AutoSteal.e = false;
		if (k.code == S.SwordInChest.k) S.SwordInChest.e = false;
		if (k.code == S.DropSword.k) S.DropSword.e = false;
		if (k.code === S.Spectator.k && !S.Spectator.e) client["ΔᐃⲆᐃ"].send(JSON.stringify([29]));
	});
}
Define();

let create_text = (text, font_color, position_x, position_y, font_size, color, width, rotation = 0) => {
	let ctx = document.getElementById("game_canvas").getContext("2d");
	ctx.save();
	ctx.beginPath();
	ctx.rotate(rotation);
	let textMetrics = ctx.measureText(text);
	ctx.font = font_size + "px Baloo Paaji";
	ctx.strokeStyle = color;
	ctx.lineWidth = width;
	ctx.fillStyle = font_color;
	ctx.strokeText(text, position_x - textMetrics.width, position_y);
	ctx.fillText(text, position_x - textMetrics.width, position_y);
	ctx.restore();
};

function findClosestSeed(a, b, c) {
	for (let i = 0; i < b.length; i++) {
		if (b[i].info && b[i].info != 16 && b[i].info != 10) {
			const distance = getdist(a, b[i]);
			if (distance <= c) {
				if (closest) {
					if (distance < getdist(closest, a)) {
						closest = b[i];
					}
				} else var closest = b[i];
			}
		}
	}
	return closest;
}

function findClosestSeed2(a, b, c) {
	for (let i = 0; i < b.length; i++) {
		if (b[i].info && b[i].info == 16) {
			const distance = getdist(a, b[i]);
			if (distance <= c) {
				if (closest) {
					if (distance < getdist(closest, a)) {
						closest = b[i];
					}
				} else var closest = b[i];
			}
		}
	}
	return closest;
}
function isPointInRange(x, y, x1, y1, x2, y2) {
	if (x1 > x2) [x1, x2] = [x2, x1];

	if (y1 > y2) [y1, y2] = [y2, y1];

	return x >= x1 && x <= x2 && y >= y1 && y <= y2;
}
function Pathfinde(myPlayer, Nearest) {
	let y1 = myPlayer.y;
	let x1 = myPlayer.x;
	let x2 = Nearest ? Nearest.x : x;
	let y2 = Nearest ? Nearest.y : 0;
	let Pathfind = 0;
	if (y1 < y2 - 25 && Nearest) {
		Pathfind += 4;
	}
	if (y1 > y2 + 25 && Nearest) {
		Pathfind += 8;
	}
	if (x1 < x2 - 25) {
		Pathfind += 2;
	}
	if (x1 > x2 + 25) {
		Pathfind += 1;
	}
	return Pathfind;
}
window.path = Pathfinde;

function Pathfinde2(myPlayer, x, y) {
	let y1 = myPlayer.y;
	let x1 = myPlayer.x;
	let x2 = x;
	let y2 = y;
	let Pathfind = 0;
	if (y1 < y2 - 25) {
		Pathfind += 4;
	}
	if (y1 > y2 + 25) {
		Pathfind += 8;
	}
	if (x1 < x2 - 25) {
		Pathfind += 2;
	}
	if (x1 > x2 + 25) {
		Pathfind += 1;
	}
	return Pathfind;
}
window.path2 = Pathfinde2;
function Visuals() {
	requestAnimationFrame(Visuals);
	try {
		if (window.ⵠᐃⲆⵠᐃⵠ) window.ctx = document.getElementById("game_canvas").getContext("2d");
	} catch (error) {
		return;
	}

	let i = 22.5;
	for (hack in S) {
		if (S[hack].e && S[hack].k) {
			ctx.save();
			ctx.beginPath();
			ctx.lineWidth = 6;
			ctx.fillStyle = "red";
			ctx.strokeStyle = "black";
			ctx.font = "22px Baloo Paaji";
			ctx.strokeText(hack, 3, i);
			ctx.fillText(hack, 3, i);
			ctx.restore();
			i += 22.5;
		}
	}

	if (!window.world || !window.client || !window.user) return;
	if (!window.world["ⵠⵠᐃ"] || user.alive == false || !window.ⵠᐃⲆⵠᐃⵠ) return;
	let myPlayer = world["ⵠⵠᐃ"][ITEMS.PLAYERS].find((e) => {
		return e["ⵠⵠΔᐃ"] == user.id;
	});

	if (S.BoxInfo) {
		world["ⵠⵠᐃ"][ITEMS.DEAD_BOX].forEach((box) => {
			if (user.alive) {
				if (!box.dissapear) box.dissapear = Date.now() + 300000;
				if (!box.hits) box.hits = 0;
				if (box.change == undefined) box.change = true;
				if (!box.hitten) {
					box.hitten = (e) => {
						log(e.change);
						if (e.action == STATE.HURT && e.change) {
							e.change = false;
							e.hits++;
						}
						if (e.action != STATE.HURT) e.change = true;
					};
				}
				box.hitten(box);
				const time = Math.ceil((box.dissapear - Date.now()) / 1000);

				ctx.save();
				ctx.lineWidth = 8;
				ctx.font = "16px Baloo Paaji";
				ctx.strokeStyle = "black";
				ctx.fillStyle = "red";
				ctx.strokeText(`${time} S`, box.x - 20 + user["ⵠΔΔ"].x, box.y + user["ⵠΔΔ"].y);
				ctx.fillText(`${time} S`, box.x - 20 + user["ⵠΔΔ"].x, box.y + user["ⵠΔΔ"].y);
				ctx.restore();

				ctx.save();
				ctx.lineWidth = 8;
				ctx.font = "16px Baloo Paaji";
				ctx.strokeStyle = "black";
				ctx.fillStyle = "red";
				ctx.strokeText(`hits: ${box.hits}`, box.x - 20 + user["ⵠΔΔ"].x, box.y + 20 + user["ⵠΔΔ"].y);
				ctx.fillText(`hits: ${box.hits}`, box.x - 20 + user["ⵠΔΔ"].x, box.y + 20 + user["ⵠΔΔ"].y);
				ctx.restore();
			}
		});
		world["ⵠⵠᐃ"][ITEMS.CRATE].forEach((box) => {
			if (user.alive) {
				if (!box.dissapear) box.dissapear = Date.now() + 16000;
				if (!box.hits) box.hits = 0;
				if (box.change == undefined) box.change = true;
				if (!box.hitten) {
					box.hitten = (e) => {
						log(e.change);
						if (e.action == STATE.HURT && e.change) {
							e.change = false;
							e.hits++;
						}
						if (e.action != STATE.HURT) e.change = true;
					};
				}
				box.hitten(box);
				const time = Math.ceil((box.dissapear - Date.now()) / 1000);

				ctx.save();
				ctx.lineWidth = 8;
				ctx.font = "16px Baloo Paaji";
				ctx.strokeStyle = "black";
				ctx.fillStyle = "white";
				ctx.strokeText(`${time} S`, box.x - 20 + user["ⵠΔΔ"].x, box.y + user["ⵠΔΔ"].y);
				ctx.fillText(`${time} S`, box.x - 20 + user["ⵠΔΔ"].x, box.y + user["ⵠΔΔ"].y);
				ctx.restore();

				ctx.save();
				ctx.lineWidth = 8;
				ctx.font = "16px Baloo Paaji";
				ctx.strokeStyle = "black";
				ctx.fillStyle = "white";
				ctx.strokeText(`hits: ${box.hits}`, box.x - 20 + user["ⵠΔΔ"].x, box.y + 20 + user["ⵠΔΔ"].y);
				ctx.fillText(`hits: ${box.hits}`, box.x - 20 + user["ⵠΔΔ"].x, box.y + 20 + user["ⵠΔΔ"].y);
				ctx.restore();
			}
		});
	}

	const extractor_ids = [24, 25, 26, 27, 28, ITEMS.WINDMILL, ITEMS.BREAD_OVEN];
	if (user.alive)
		for (let i = 0; i < extractor_ids.length; ++i) {
			const extType = extractor_ids[i];
			const extractors = world["ⵠⵠᐃ"][extType];
			for (let j = 0; j < extractors.length; j++) {
				const oven = extractors[j];
				if (ITEMS.BREAD_OVEN == extType) {
					ctx.save();
					ctx.lineWidth = 8;
					ctx.font = "20px Baloo Paaji";
					ctx.strokeStyle = "black";
					ctx.fillStyle = "white";
					ctx.strokeText(`x${oven.info & 0x1f}`, oven.x - 20 + user["ⵠΔΔ"].x, oven.y + user["ⵠΔΔ"].y);
					ctx.fillText(`x${oven.info & 0x1f}`, oven.x - 20 + user["ⵠΔΔ"].x, oven.y + user["ⵠΔΔ"].y);
					ctx.restore();

					ctx.save();
					ctx.lineWidth = 8;
					ctx.font = "20px Baloo Paaji";
					ctx.strokeStyle = "black";
					ctx.fillStyle = "white";
					ctx.strokeText(`x${(oven.info & 0x3e0) >> 5}`, oven.x - 20 + user["ⵠΔΔ"].x, oven.y + 20 + user["ⵠΔΔ"].y);
					ctx.fillText(`x${(oven.info & 0x3e0) >> 5}`, oven.x - 20 + user["ⵠΔΔ"].x, oven.y + 20 + user["ⵠΔΔ"].y);
					ctx.restore();

					ctx.save();
					ctx.lineWidth = 8;
					ctx.font = "20px Baloo Paaji";
					ctx.strokeStyle = "black";
					ctx.fillStyle = "white";
					ctx.strokeText(`x${(oven.info & 0x7c00) >> 10}`, oven.x - 20 + user["ⵠΔΔ"].x, oven.y + 40 + user["ⵠΔΔ"].y);
					ctx.fillText(`x${(oven.info & 0x7c00) >> 10}`, oven.x - 20 + user["ⵠΔΔ"].x, oven.y + 40 + user["ⵠΔΔ"].y);
					ctx.restore();
				}
			}

			if (ITEMS.BREAD_OVEN == extType) continue;
			for (let j = 0; j < extractors.length; j++) {
				const extractor = extractors[j];

				ctx.save();
				ctx.lineWidth = 8;
				ctx.font = "20px Baloo Paaji";
				ctx.strokeStyle = "black";
				ctx.fillStyle = "white";
				ctx.strokeText(`x${extractor.info & 0xff}`, extractor.x - 20 + user["ⵠΔΔ"].x, extractor.y + user["ⵠΔΔ"].y);
				ctx.fillText(`x${extractor.info & 0xff}`, extractor.x - 20 + user["ⵠΔΔ"].x, extractor.y + user["ⵠΔΔ"].y);
				ctx.restore();
			}

			for (let j = 0; j < extractors.length; ++j) {
				const extractor = extractors[j];
				ctx.save();
				ctx.lineWidth = 8;
				ctx.font = "20px Baloo Paaji";
				ctx.strokeStyle = "black";
				ctx.fillStyle = "white";
				// ctx.fillStyle = extractor.info >> 8 > 0 ? "yellow" : "white";
				ctx.strokeText(
					`x${(extractor.info & 0xff00) >> 8}`,
					extractor.x - 20 + user["ⵠΔΔ"].x,
					extractor.y + 20 + user["ⵠΔΔ"].y
				);
				ctx.fillText(
					`x${(extractor.info & 0xff00) >> 8}`,
					extractor.x - 20 + user["ⵠΔΔ"].x,
					extractor.y + 20 + user["ⵠΔΔ"].y
				);
				ctx.restore();
			}
		}

	if ("ΔᐃⲆᐃ")
		if (client["ΔᐃⲆᐃ"])
			if (S.Timer && client["ΔᐃⲆᐃ"].readyState == 1) {
				// draw timer
				let emptyInv = () => {
					if ("ΔⲆⵠⲆ")
						if ("ᐃⵠΔΔⲆ") return user["ΔⲆⵠⲆ"]["ᐃⵠΔΔⲆ"].length == 0 ? 70 : 0;
						else return 0;
				};
				let userChest = () => {
					if ("ⵠⵠᐃ") {
						for (let j = 0; j < world["ⵠⵠᐃ"][ITEMS.CHEST].length; j++) {
							if (getdist(myPlayer, world["ⵠⵠᐃ"][ITEMS.CHEST][j]) > 100) continue;
							else return -50;
						}
					} else return 0;
					return 0;
				};
				ctx.save();
				ctx.beginPath();
				ctx.lineWidth = 6;
				ctx.fillStyle = "red";
				ctx.strokeStyle = "black";
				ctx.font = "35px Baloo Paaji";
				ctx.strokeText(
					Math.floor(6 - (Date.now() - A) / 1e3),
					innerWidth / 2,
					innerHeight - 90 + (emptyInv() || 0) + (userChest() || 0)
				);
				ctx.fillText(
					Math.floor(6 - (Date.now() - A) / 1e3),
					innerWidth / 2,
					innerHeight - 90 + (emptyInv() || 0) + (userChest() || 0)
				);
				ctx.restore();

				// draw heal timer
				ctx.save();
				ctx.beginPath();
				ctx.lineWidth = 6;
				ctx.fillStyle = "red";
				ctx.strokeStyle = "black";
				ctx.font = "35px Baloo Paaji";
				ctx.strokeText(
					Math.floor(11 - (Date.now() - B) / 1e3),
					innerWidth / 2 - 245,
					innerHeight - 90 + (emptyInv() || 0) + (userChest() || 0)
				);
				ctx.fillText(
					Math.floor(11 - (Date.now() - B) / 1e3),
					innerWidth / 2 - 245,
					innerHeight - 90 + (emptyInv() || 0) + (userChest() || 0)
				);
				ctx.restore();

				// draw hp
				ctx.save();
				ctx.beginPath();
				ctx.lineWidth = 6;
				ctx.fillStyle = "red";
				ctx.strokeStyle = "black";
				ctx.font = "35px Baloo Paaji";
				ctx.strokeText(x.hp + "%", innerWidth / 2 - 370, innerHeight - 120 + (emptyInv() || 0) + (userChest() || 0));
				ctx.fillText(x.hp + "%", innerWidth / 2 - 370, innerHeight - 120 + (emptyInv() || 0) + (userChest() || 0));
				ctx.restore();

				// draw food
				ctx.save();
				ctx.beginPath();
				ctx.lineWidth = 6;
				ctx.fillStyle = "red";
				ctx.strokeStyle = "black";
				ctx.font = "35px Baloo Paaji";
				ctx.strokeText(x.food + "%", innerWidth / 2 - 130, innerHeight - 120 + (emptyInv() || 0) + (userChest() || 0));
				ctx.fillText(x.food + "%", innerWidth / 2 - 130, innerHeight - 120 + (emptyInv() || 0) + (userChest() || 0));
				ctx.restore();

				// draw temp
				ctx.save();
				ctx.beginPath();
				ctx.lineWidth = 6;
				ctx.fillStyle = "red";
				ctx.strokeStyle = "black";
				ctx.font = "35px Baloo Paaji";
				ctx.strokeText(
					x.temp + (100 - x.heat) + "%",
					innerWidth / 2 + 110,
					innerHeight - 120 + (emptyInv() || 0) + (userChest() || 0)
				);
				ctx.fillText(
					x.temp + (100 - x.heat) + "%",
					innerWidth / 2 + 110,
					innerHeight - 120 + (emptyInv() || 0) + (userChest() || 0)
				);
				ctx.restore();

				// draw water
				ctx.save();
				ctx.beginPath();
				ctx.lineWidth = 6;
				ctx.fillStyle = "red";
				ctx.strokeStyle = "black";
				ctx.font = "35px Baloo Paaji";
				ctx.strokeText(x.water + "%", innerWidth / 2 + 350, innerHeight - 120 + (emptyInv() || 0) + (userChest() || 0));
				ctx.fillText(x.water + "%", innerWidth / 2 + 350, innerHeight - 120 + (emptyInv() || 0) + (userChest() || 0));
				ctx.restore();
			}

	if (world["ⵠⵠᐃ"][0].length == 0) return;
	if (window.blizard) {
		ctx.save();
		ctx.drawImage(BlizzardImage, innerWidth - 360, 230, 60, 60);
		ctx.restore();
	}
	if (window.sandstorm) {
		ctx.save();
		ctx.drawImage(SandStormImage, innerWidth - 360, 290, 60, 60);
		ctx.restore();
	}

	let camx = user["ⵠΔΔ"].x;
	let camy = user["ⵠΔΔ"].y;

	if (S.chestinfo) {
		const chests = world["ⵠⵠᐃ"][ITEMS.CHEST];
		for (let i of chests) drawChestInfo(i);
	}
}

document.ondblclick = (e) => {
	let myPlayer = world["ⵠⵠᐃ"][ITEMS.PLAYERS].find((e) => {
		return e["ⵠⵠΔᐃ"] == user.id;
	});
	if (window.currentAccessory) myPlayer["ⵠⲆⲆⲆⵠ"] = currentAccessory;
	if (window.currentBag) myPlayer["ᐃⲆᐃᐃⲆ"] = currentBag;
	if (window.currentBook) myPlayer["ΔⵠΔᐃⲆ"] = currentBook;
	if (window.currentSkin) myPlayer["ⲆⵠⵠⲆ"] = currentSkin;
};

function Aymen() {
	requestAnimationFrame(Aymen);
	if (!window.world || !window.client || !window.user) return;
	if (!window.client["ΔᐃⲆᐃ"]) return;
	if (!window["ᐃᐃᐃᐃ"]) return;
	if (S.Spectator.e) {
		user["ⵠΔΔ"]["ᐃⵠⵠ"] = () => {};
		if (keyboard["ᐃⵠⵠⵠΔᐃΔ"]()) user["ⵠΔΔ"].x += 0.5 * 1e2;
		if (keyboard["ᐃⲆⲆᐃΔⵠⲆ"]()) user["ⵠΔΔ"].x -= 0.5 * 1e2;
		if (keyboard["ⵠᐃΔⲆⲆΔⵠ"]()) user["ⵠΔΔ"].y -= 0.5 * 1e2;
		if (keyboard["ⲆΔΔΔⵠΔⵠ"]()) user["ⵠΔΔ"].y += 0.5 * 1e2;
	} else {
		user["ⵠΔΔ"]["ᐃⵠⵠ"] = window.originalCamUpdate;
	}
	if (!window.client["ΔᐃⲆᐃ"]["current"]) {
		client["ΔᐃⲆᐃ"]["current"] = true;
		client["ΔᐃⲆᐃ"].addEventListener("message", packetHandler);
		client["ΔᐃⲆᐃ"].send = new Proxy(client["ΔᐃⲆᐃ"].send, {
			apply: function (target, thisArg, args) {
				const spectator_packets = [0x1d, 3, 29];
				let packet;
				if (typeof args[0] == "string") packet = JSON.parse(args[0])[0];

				if (typeof args[0] == "string" && spectator_packets.includes(packet) && S.Spectator.e) return;
				if (typeof args[0] != "string" && spectator_packets.includes(args[0][0]) && S.Spectator.e) return;
				return target.apply(thisArg, args);
			},
		});
	}
	if (client["ΔᐃⲆᐃ"].readyState !== 1 || user.alive == false) return;

	let myPlayer = world["ⵠⵠᐃ"][ITEMS.PLAYERS].find((e) => {
		return e["ⵠⵠΔᐃ"] == user.id;
	});

	if (!myPlayer || !ᐃⵠᐃⲆᐃᐃ) return;

	const now = Date.now();

	// if (S.Autofarm.e && S.Autofarm.angle) {
	// user.control["ᐃⵠⵠ"] = function () {
	// 	let angle
	// 	let myPlayer = world["ⵠⵠᐃ"][ITEMS.PLAYERS].find((e) => {
	// 		return e["ⵠⵠΔᐃ"] == user.id;
	// 	});
	// 	if (myPlayer) {
	// 		angle = S.Autofarm.angle;
	// 		myPlayer.angle = angle;
	// 		myPlayer[vars.nangle] = angle;
	// 	}
	// };
	// } else user.control["ᐃⵠⵠ"] = window.originalUpdate;
	if (S.AMB.e && S.AMB.a) {
		if (!window["ᐃᐃᐃᐃ"]) return 0x51;
		user.control["ᐃⵠⵠ"] = function () {
			let myPlayer = world["ⵠⵠᐃ"][ITEMS.PLAYERS].find((e) => {
				return e["ⵠⵠΔᐃ"] == user.id;
			});
			if (myPlayer) {
				if (S.AMB.a && S.AMB.e) angle = S.AMB.a;
				myPlayer.angle = angle;
				// myPlayer[vars.nangle] = angle;
			}
			if (user["ΔΔᐃⲆⲆ"].open) return;
			if (user["ΔᐃⵠⲆⵠ"].open) return;

			var update = false;
			var move = 0;

			var left = keyboard["ᐃⵠⵠⵠΔᐃΔ"]();
			if (left) move |= 1;

			var right = keyboard["ᐃⲆⲆᐃΔⵠⲆ"]();
			if (right) move |= 2;

			var bottom = keyboard["ⵠᐃΔⲆⲆΔⵠ"]();
			if (bottom) move |= 4;

			var top = keyboard["ⲆΔΔΔⵠΔⵠ"]();
			if (top) move |= 8;

			if (this[vars.previous] != move) client["ΔΔΔΔᐃⵠᐃᐃᐃ"](move);
			this[vars.previous] = move;
		};
	} else user.control["ᐃⵠⵠ"] = window.originalUpdate;
	// } else if (!S.Autofarm.e && !S.Autofarm.angle) user.control["ᐃⵠⵠ"] = window.originalUpdate;

	client["ᐃΔΔᐃⲆⵠΔⵠⲆ"] = (id) => {
		S.AutoCraft.id = id;
		if (myPlayer.right !== 28 && S.AutoBook) client["ΔᐃⲆᐃ"].send(JSON.stringify([packets.equip, 28]));
		client["ΔᐃⲆᐃ"].send(JSON.stringify([packets.craft, id]));
	};

	client["ᐃⵠⵠⲆⵠᐃⲆⵠⵠ"] = (id) => {
		S.AutoRecycle.id = id;
		client["ΔᐃⲆᐃ"].send(JSON.stringify([packets.recycle, id]));
	};

	const extractor_ids = [24, 25, 26, 27, 28, 29];
	if (!window["ᐃⵠᐃⲆᐃᐃ"]) return 0x89;
	if (readys.AutoExt) {
		readys.AutoExt = false;
		setTimeout(() => (readys.AutoExt = true), 100);
		extractor_ids.forEach((id) => {
			world["ⵠⵠᐃ"][id].forEach((ext) => {
				if (getdist(myPlayer, ext) <= 300 && (S.AutoExtTake.e || S.AutoSteal.e)) {
					cooldowns.AutoExtTake = Date.now();
					client["ΔᐃⲆᐃ"].send(JSON.stringify([packets.extTake, ext["ⵠⵠΔᐃ"], ext.id, id]));
				}
				if (getdist(myPlayer, ext) <= 300 && S.AutoExtPut.e && (ext.info & 0xff) < 255) {
					cooldowns.AutoExtTake = Date.now();
					client["ΔᐃⲆᐃ"].send(JSON.stringify([packets.extPut, 255, ext["ⵠⵠΔᐃ"], ext.id, id]));
				}
			});
		});
	}

	if (readys.AutoBread) {
		readys.AutoBread = false;
		setTimeout(() => (readys.AutoBread = true), 100);

		world["ⵠⵠᐃ"][ITEMS.BREAD_OVEN].forEach((oven) => {
			if (getdist(myPlayer, oven) <= 300 && (S.AutoBreadTake.e || S.AutoSteal.e)) {
				client["ΔᐃⲆᐃ"].send(JSON.stringify([packets.ovenTake, oven["ⵠⵠΔᐃ"], oven.id]));
			}
			if (getdist(myPlayer, oven) <= 300 && S.AutoBreadPut.e && (oven.info & 0x1f) < 31) {
				client["ΔᐃⲆᐃ"].send(JSON.stringify([packets.ovenPutWood, 31, oven["ⵠⵠΔᐃ"], oven.id]));
			}
			if (getdist(myPlayer, oven) <= 300 && S.AutoBreadPut.e && (oven.info & 0x3e0) >> 5 < 31) {
				client["ΔᐃⲆᐃ"].send(JSON.stringify([packets.ovenPutFlour, 31, oven["ⵠⵠΔᐃ"], oven.id]));
			}
		});

		world["ⵠⵠᐃ"][ITEMS.WINDMILL].forEach((windMill) => {
			if (getdist(myPlayer, windMill) <= 300 && (S.AutoBreadTake.e || S.AutoSteal.e)) {
				client["ΔᐃⲆᐃ"].send(JSON.stringify([packets.windMillTake, windMill["ⵠⵠΔᐃ"], windMill.id]));
			}
			if (getdist(myPlayer, windMill) <= 300 && S.AutoBreadPut.e && (windMill.info & 0xff) < 255) {
				client["ΔᐃⲆᐃ"].send(JSON.stringify([packets.windMillPut, 255, windMill["ⵠⵠΔᐃ"], windMill.id]));
			}
		});
	}

	if (S.AutoTotem.e && user["ΔⵠⵠΔᐃ"].length == 0) {
		world["ⵠⵠᐃ"][ITEMS.TOTEM].forEach((totem) => {
			if (getdist(totem, myPlayer) < 250) {
				client["ΔᐃⲆᐃ"].send(JSON.stringify([packets.joinTotem, totem["ⵠⵠΔᐃ"], totem.id]));
			}
		});
	}

	if (S.AutoCraft.e && S.AutoCraft.id !== -1 && readys.AutoCraft) {
		readys.AutoCraft = false;
		setTimeout((e) => (readys.AutoCraft = true), 50);
		eatFood(x.food, x.water, x.heat);
		setTimeout((e) => client["ᐃΔΔᐃⲆⵠΔⵠⲆ"](S.AutoCraft.id), 50);
	}

	if (S.AutoRecycle.e && S.AutoRecycle.id !== -1 && readys.AutoRecycle) {
		readys.AutoRecycle = false;
		setTimeout((e) => (readys.AutoRecycle = true), 50);
		if (x.food < 40) eatFood(x.food, x.water, x.heat);
		setTimeout((e) => client["ᐃⵠⵠⲆⵠᐃⲆⵠⵠ"](S.AutoRecycle.id), 50);
	}

	if (S.AMB.e && myPlayer) {
		const weaponType = HoldWeapon(myPlayer.right, true);
		let myRange;
		switch (weaponType) {
			case 1:
				myRange = myPlayer.fly ? 196.8 : 157.6;
				break;
			case 2:
				myRange = myPlayer.fly ? 291.8 : 227.6;
				break;
			case 3:
				myRange = 620;
				break;
			case 4:
				myRange = myPlayer.fly ? 140 : 125;
				break;
			case 6:
				myRange = myPlayer.fly ? 160 : 131;
				break;
			case 5:
				myRange = myPlayer.clothe == INV.WINTER_HOOD || myPlayer.clothe == INV.HOOD ? (myPlayer.fly ? 50 : 50) : null;
				break;
			default:
				myRange = null;
				break;
		}
		if (myRange) {
			const Enemy = EnemyToAttack(myPlayer, world["ⵠⵠᐃ"][ITEMS.PLAYERS]);
			if (Enemy) {
				const RangeBetweenMeAndEnemy = dist2dSQRT(myPlayer, Enemy);
				if (RangeBetweenMeAndEnemy <= myRange) {
					S.AMB.a = calcAngle(myPlayer, Enemy, true);
					S.AMB.t = Enemy;
					const e = 2 * Math.PI;
					const Angle255 = Math.floor((((S.AMB.a + e) % e) * 255) / e);
					client["ΔᐃⲆᐃ"].send(JSON.stringify([packets.angle, Angle255]));
					if (S.AMB.a && RangeBetweenMeAndEnemy <= myRange - 22) {
						client["ΔᐃⲆᐃ"].send(JSON.stringify([packets.attack, Angle255]));
						client["ΔᐃⲆᐃ"].send(JSON.stringify([packets.stopAttack]));
					}
				} else {
					S.AMB.a = null;
					S.AMB.t = null;
				}
			} else {
				S.AMB.a = null;
			}
		}
	} else S.AMB.a = null;
	window.mp = myPlayer;
	if (S.Crown.e && myPlayer.right === 2 && !window.user["ᐃᐃⲆΔᐃ"].wait && readys.AutoCrown) {
		world["ⵠⵠᐃ"][ITEMS.RESURRECTION].forEach((res) => {
			if (getdist(res, myPlayer) < 350) {
				client["ΔᐃⲆᐃ"].send(JSON.stringify([packets.revive, res["ⵠⵠΔᐃ"], res.id]));
				// equipCrown(myPlayer);
			}
		});
	}

	if (S.DropSword.e && myPlayer && HoldWeapon(myPlayer.right, true) !== 5 && HoldWeapon(myPlayer.right, true) !== 0) {
		client["ΔᐃⲆᐃ"].send(JSON.stringify([packets.drop, myPlayer.right]));
	}

	if (S.AutoSteal.e && myPlayer) {
		world["ⵠⵠᐃ"][ITEMS.CHEST].forEach((chest) => {
			if (250 > getdist(myPlayer, chest) && chest.action !== 0) {
				if (S.AutoSteal.u && chest.lock == 1) {
					if (S.AutoSteal.l.includes(chest.action / 2 - 1)) {
						client["ΔᐃⲆᐃ"].send(JSON.stringify([packets.unlock, chest["ⵠⵠΔᐃ"], chest.id]));
						client["ΔᐃⲆᐃ"].send(JSON.stringify([packets.chestTake, chest["ⵠⵠΔᐃ"], chest.id]));
					}
				} else client["ΔᐃⲆᐃ"].send(JSON.stringify([packets.chestTake, chest["ⵠⵠΔᐃ"], chest.id]));
			}
		});
	}

	if (
		S.SwordInChest.e &&
		myPlayer &&
		HoldWeapon(myPlayer.right, true) !== 5 &&
		HoldWeapon(myPlayer.right, true) !== 0
	) {
		var e = Math.PI * 2;
		const i = Math.floor((((myPlayer.angle + e) % e) * 255) / e);

		let CHEST = false;
		let closeChest = Infinity;
		let oldChests = world["ⵠⵠᐃ"][ITEMS.CHEST].length;

		world["ⵠⵠᐃ"][ITEMS.CHEST].forEach((chest) => {
			if (150 > getdist(myPlayer, chest) && closeChest > getdist(myPlayer, chest)) {
				closeChest = getdist(myPlayer, chest);
				CHEST = chest;
				window.CHEST = chest;
			}
		});

		if (CHEST) {
			client["ΔᐃⲆᐃ"].send(JSON.stringify([packets.chestPut, myPlayer.right, 8000, CHEST["ⵠⵠΔᐃ"], CHEST.id]));
			client["ΔᐃⲆᐃ"].send(JSON.stringify([packets.chestTake, CHEST["ⵠⵠΔᐃ"], CHEST.id]));
			setTimeout(() => client["ΔᐃⲆᐃ"].send(JSON.stringify([packets.chestTake, CHEST["ⵠⵠΔᐃ"], CHEST.id])), 50);
			return;
		}

		for (let index = 1; index < 30; index += 10) {
			client["ΔᐃⲆᐃ"].send(JSON.stringify([packets.placeBuild, 167, (127 + index + 49 + i) % 255, 0]));
			client["ΔᐃⲆᐃ"].send(JSON.stringify([packets.placeBuild, 167, (index + 49 + i) % 255, 0]));
		}

		function CheckChest() {
			if (oldChests == world["ⵠⵠᐃ"][ITEMS.CHEST].length) {
				requestAnimationFrame(CheckChest);
				return;
			}

			let CHEST = false;
			let closeChest = Infinity;

			world["ⵠⵠᐃ"][ITEMS.CHEST].forEach((chest) => {
				if (150 > getdist(myPlayer, chest) && closeChest > getdist(myPlayer, chest)) {
					closeChest = getdist(myPlayer, chest);
					CHEST = chest;
					window.CHEST = chest;
				}
			});

			client["ΔᐃⲆᐃ"].send(JSON.stringify([packets.chestPut, myPlayer.right, 8000, CHEST["ⵠⵠΔᐃ"], CHEST.id]));
			client["ΔᐃⲆᐃ"].send(JSON.stringify([packets.chestTake, CHEST["ⵠⵠΔᐃ"], CHEST.id]));
			setTimeout(() => client["ΔᐃⲆᐃ"].send(JSON.stringify([packets.chestTake, CHEST["ⵠⵠΔᐃ"], CHEST.id])), 50);
			return;
		}
		CheckChest();
	}

	if (S.Autofarm.e) {
		if (Date.now() - cooldowns.Autofarm > window.timeout || 50) {
			if (!isPointInRange(myPlayer.x, myPlayer.y, S.Autofarm.x, S.Autofarm.y, S.Autofarm.xx, S.Autofarm.yy)) {
				client["ΔΔΔΔᐃⵠᐃᐃᐃ"](
					Pathfinde(myPlayer, { x: (S.Autofarm.x + S.Autofarm.xx) / 2, y: (S.Autofarm.y + S.Autofarm.yy) / 2 })
				);
				S.Autofarm.angle = null;
				return;
			}
			for (const seeds of [
				world["ⵠⵠᐃ"][3],
				world["ⵠⵠᐃ"][31],
				world["ⵠⵠᐃ"][37],
				world["ⵠⵠᐃ"][39],
				world["ⵠⵠᐃ"][40],
				world["ⵠⵠᐃ"][43],
				world["ⵠⵠᐃ"][44],
				world["ⵠⵠᐃ"][54],
				world["ⵠⵠᐃ"][55],
			]) {
				const target = findClosestSeed(myPlayer, seeds, 20000);
				if (!target) (S.Autofarm.angle = null), client["ΔΔΔΔᐃⵠᐃᐃᐃ"](16);
				if (target) {
					if (
						(user["ΔⲆⵠⲆ"]["ᐃᐃΔ"][54] || user["ΔⲆⵠⲆ"]["ᐃᐃΔ"][53]) &&
						target &&
						target.x >= S.Autofarm.x &&
						target.x <= S.Autofarm.xx &&
						target.y >= S.Autofarm.y &&
						target.y <= S.Autofarm.yy
					) {
						const path = Pathfinde(myPlayer, target);
						client["ΔΔΔΔᐃⵠᐃᐃᐃ"](path);
						if (user["ΔⲆⵠⲆ"]["ᐃᐃΔ"][54] && myPlayer.right != 54) {
							client["ΔᐃⲆᐃ"].send(JSON.stringify([packets.equip, 54]));
						} else if (user["ΔⲆⵠⲆ"]["ᐃᐃΔ"][53] && myPlayer.right != 53 && myPlayer.right != 54)
							client["ΔᐃⲆᐃ"].send(JSON.stringify([packets.equip, 53]));

						S.Autofarm.angle = calcAngle(myPlayer, target, true);
						if (getdist(target, myPlayer) <= 220) {
							const e = 2 * Math.PI;
							const Angle255 = Math.floor((((S.Autofarm.a + e) % e) * 255) / e);
							client["ΔᐃⲆᐃ"].send(JSON.stringify([packets.angle, Angle255]));
							client["ΔᐃⲆᐃ"].send(JSON.stringify([packets.attack, Angle255]));
							client["ΔᐃⲆᐃ"].send(JSON.stringify([packets.stopAttack]));
						}
						break;
					}
				} else if (S.Autofarm.water) {
					const target2 = findClosestSeed2(myPlayer, seeds, 2000);
					if (
						target2 &&
						target2.x >= S.Autofarm.x &&
						target2.x <= S.Autofarm.xx &&
						target2.y >= S.Autofarm.y &&
						target2.y <= S.Autofarm.yy &&
						window["ΔⵠΔⲆⵠⵠᐃᐃⵠ"]
					) {
						const path = Pathfinde(myPlayer, target2);
						client["ΔΔΔΔᐃⵠᐃᐃᐃ"](path);
						if (myPlayer.right != 49 && user["ΔⲆⵠⲆ"]["ᐃᐃΔ"][49])
							client["ΔᐃⲆᐃ"].send(JSON.stringify([packets.equip, 49]));

						S.Autofarm.angle = calcAngle(myPlayer, target2, true);
						if (getdist(target2, myPlayer) <= 100) {
							client["ΔᐃⲆᐃ"].send(JSON.stringify([packets.attack, S.Autofarm.angle]));
							client["ΔᐃⲆᐃ"].send(JSON.stringify([packets.stopAttack]));
						}
					}
				} else {
					if (S.Autofarm.sx && S.Autofarm.sy) {
						const path = Pathfinde2(myPlayer, S.Autofarm.sx, S.Autofarm.sy);
						client["ΔΔΔΔᐃⵠᐃᐃᐃ"](path);
						(S.Autofarm.angle = null), client["ΔΔΔΔᐃⵠᐃᐃᐃ"](16);
					}
				}
			}
			cooldowns.Autofarm = Date.now();
		}
	} else;
	if (S.AutoSpike.e && readys.AutoSpike) {
		readys.AutoSpike = false;
		setTimeout((e) => (readys.AutoSpike = true), 200);
		let spikeId = null;
		const e = 2 * Math.PI;
		for (const currentSpike of S.AutoSpike.p) {
			const mappedSpike = spikeMap[currentSpike];
			if (mappedSpike === -1 || !window.user["ΔⲆⵠⲆ"]["ᐃᐃΔ"][mappedSpike]) continue;
			spikeId = mappedSpike;
			break;
		}
		if (spikeId) {
			let PInumb = 2 * Math.PI;
			let angle = myPlayer.angle;
			if (S.AMB.a && S.AMB.e) angle = S.AMB.a;

			let MYPLAYERANGLE = Math.floor((((angle + PInumb) % PInumb) * 255) / PInumb);
			if (!S.AutoSpike.m) {
				client["ΔᐃⲆᐃ"].send(JSON.stringify([packets.placeBuild, spikeId, MYPLAYERANGLE, 0]));
			}
			if (S.AutoSpike.m) {
				const i = Math.floor((((angle + e) % e) * 255) / e);
				client["ΔᐃⲆᐃ"].send(JSON.stringify([packets.placeBuild, spikeId, i, 0]));
				for (let index = 10; index < 30; index += 3) {
					client["ΔᐃⲆᐃ"].send(JSON.stringify([packets.placeBuild, spikeId, (-index + i) % 255, 0]));
					client["ΔᐃⲆᐃ"].send(JSON.stringify([packets.placeBuild, spikeId, (index + i) % 255, 0]));
				}
			}
		}
	}
	if (S.AutoWall.e && readys.AutoWall) {
		readys.AutoWall = false;
		setTimeout((e) => (readys.AutoWall = true), 200);
		let spikeId = 162;
		const e = 2 * Math.PI;

		if (spikeId) {
			let PInumb = 2 * Math.PI;
			let MYPLAYERANGLE = Math.floor((((myPlayer.angle + PInumb) % PInumb) * 255) / PInumb);
			if (!S.AutoSpike.m) {
				client["ΔᐃⲆᐃ"].send(JSON.stringify([packets.placeBuild, spikeId, MYPLAYERANGLE, 0]));
			}
			if (S.AutoSpike.m) {
				const i = Math.floor((((myPlayer.angle + e) % e) * 255) / e);
				client["ΔᐃⲆᐃ"].send(JSON.stringify([packets.placeBuild, spikeId, i, 0]));
				for (let index = 1; index < 30; index += 3) {
					client["ΔᐃⲆᐃ"].send(JSON.stringify([packets.placeBuild, spikeId, (-index + i) % 255, 0]));
					client["ΔᐃⲆᐃ"].send(JSON.stringify([packets.placeBuild, spikeId, (index + i) % 255, 0]));
				}
			}
		}
	}
	if (S.AutoPutRess.e && readys.AutoPutRess) {
		readys.AutoPutRess = false;
		setTimeout(() => (readys.AutoPutRess = true), 200);
		let resStone = 151;
		const e = 2 * Math.PI;

		if (resStone) {
			const i = Math.floor((((myPlayer.angle + e) % e) * 255) / e);
			client["ΔᐃⲆᐃ"].send(JSON.stringify([packets.placeBuild, resStone, i, 0]));
			for (let index = 1; index < 30; index += 5) {
				client["ΔᐃⲆᐃ"].send(JSON.stringify([packets.placeBuild, resStone, (-index + i) % 255, 0]));
				client["ΔᐃⲆᐃ"].send(JSON.stringify([packets.placeBuild, resStone, (index + i) % 255, 0]));
			}
		}
	}
}

// document.addEventListener("DOMContentLoaded", () => {
// 	Utils.LoadHack();
// 	if (localStorage.getItem("Loux_Key")) PC(localStorage.getItem("Loux_Key"));
// 	window.loaded = true;
// });
function loader() {
	if (document.readyState == "complete") {
		Utils.LoadHack();
		if (localStorage.getItem("Loux_Key")) PC(localStorage.getItem("Loux_Key"));
	} else requestAnimationFrame(loader);
}
loader();

function HoldWeapon(_, $) {
	switch (_) {
		case 34:
		case 18:
		case 33:
		case 15:
		case 14:
		case 13:
		case 12:
		case 16:
		case 17:
			return 2;
		case 57:
		case 5:
		case 6:
		case 30:
		case 62:
		case 9:
		case 0:
		case 63:
		case 19:
			return 1;
		case 64:
		case 65:
		case 66:
		case 67:
		case 68:
		case 70:
		case 69:
			return 3;
		case 94:
		case 95:
		case 96:
		case 97:
		case 98:
		case 90:
		case 99:
			return 6;
		case 45:
			if ($) return 4;
		case -1:
			if ($) return 5;
	}
	return 0;
}

function calcAngle(_, $, o) {
	return _ && $ ? (o ? Math.atan2($.r.y - _.r.y, $.r.x - _.r.x) : Math.atan2($.y - _.y, $.x - _.x)) : null;
}

function EnemyToAttack(myPlayer, PlayerList) {
	let nearest = null;
	let distSqrd = -1;
	let HoldingSpear = HoldWeapon(myPlayer.right, false) === 2 ? true : false;
	for (var i = 0, obj = null, d = null; i < PlayerList.length; ++i) {
		obj = PlayerList[i];
		if (!window["ΔⵠΔⲆⵠⵠᐃᐃⵠ"]) continue;
		if (obj["ⵠⵠΔᐃ"] === myPlayer["ⵠⵠΔᐃ"] || user["ΔⵠⵠΔᐃ"].includes(obj["ⵠⵠΔᐃ"])) continue;
		if (!obj.ally && myPlayer.fly === obj.fly && !obj.ghost) {
			d = (myPlayer.x - obj.x) ** 2 + (myPlayer.y - obj.y) ** 2;
			if (HoldingSpear && d < 210) continue;
			if (distSqrd === -1 || d < distSqrd) {
				distSqrd = d;
				nearest = obj;
			}
		}
	}
	// let pos = Object.keys(mouse)[4]
	// if (S.AMB.e && S.AMB.a != null) {
	//     mouse[pos].x = user["ⵠΔΔ"].x + nearest.x;
	//     mouse[pos].y = user["ⵠΔΔ"].y + nearest.y;
	// }

	return nearest;
}

function dist2dSQRT(p1, p2) {
	if (p1 && p2) {
		return Math.sqrt((p1.x - p2.x) ** 2 + (p1.y - p2.y) ** 2);
	}
	return null;
}

function selectTool(tool1, tool2) {
	if (user["ΔⲆⵠⲆ"]["ᐃᐃΔ"][tool1]) {
		if (myPlayer.right !== tool1) {
			client["ΔᐃⲆᐃ"].send(JSON.stringify([packets.equip, tool1]));
		}
	} else if (user["ΔⲆⵠⲆ"]["ᐃᐃΔ"][tool2]) {
		if (myPlayer.right !== tool2) {
			client["ΔᐃⲆᐃ"].send(JSON.stringify([packets.equip, tool2]));
		}
	}
}

function getdist(a, b) {
	if (!window["ⲆᐃⲆⲆᐃⲆⲆⲆ"]) return 0x37;
	return Math.sqrt((b.x - a.x) * (b.x - a.x) + (b.y - a.y) * (b.y - a.y));
}

function getBestFood() {
	if (!window["ⲆᐃⲆⲆᐃⲆⲆⲆ"]) return 0x47;
	if (user["ΔⲆⵠⲆ"]["ᐃᐃΔ"][136]) return 136;
	if (user["ΔⲆⵠⲆ"]["ᐃᐃΔ"][110]) return 110;
	if (user["ΔⲆⵠⲆ"]["ᐃᐃΔ"][145]) return 145;
	if (user["ΔⲆⵠⲆ"]["ᐃᐃΔ"][138]) return 138;
	if (user["ΔⲆⵠⲆ"]["ᐃᐃΔ"][117]) return 117;
	if (user["ΔⲆⵠⲆ"]["ᐃᐃΔ"][209]) return 209;
	if (user["ΔⲆⵠⲆ"]["ᐃᐃΔ"][207]) return 207;
	if (user["ΔⲆⵠⲆ"]["ᐃᐃΔ"][205]) return 205;
	if (user["ΔⲆⵠⲆ"]["ᐃᐃΔ"][189]) return 189;
	if (user["ΔⲆⵠⲆ"]["ᐃᐃΔ"][143]) return 143;
	return null;
}
function getBestHammer() {
	if (user["ΔⲆⵠⲆ"]["ᐃᐃΔ"][45]) return 45;
	if (user["ΔⲆⵠⲆ"]["ᐃᐃΔ"][39]) return 39;
	if (user["ΔⲆⵠⲆ"]["ᐃᐃΔ"][38]) return 38;
	if (user["ΔⲆⵠⲆ"]["ᐃᐃΔ"][37]) return 37;
	if (user["ΔⲆⵠⲆ"]["ᐃᐃΔ"][36]) return 36;
	if (user["ΔⲆⵠⲆ"]["ᐃᐃΔ"][35]) return 35;
	return 7;
}

function eatFood(hunger, water, heat) {
	client.ping();
	const food = getBestFood();

	if (hunger < 40 && food) client["ΔᐃⲆᐃ"].send(JSON.stringify([packets.equip, food]));

	if (water < 50) client["ΔᐃⲆᐃ"].send(JSON.stringify([packets.equip, 127]));

	if (100 - heat > 95 && S.Autoice) {
		client["ΔᐃⲆᐃ"].send(JSON.stringify([packets.equip, 142]));
	}
}
let heal = false;
const packetHandler = (e) => {
	if ("string" == typeof e.data) {
		if (3 === (e = JSON.parse(e.data))[0]) {
			(A = Date.now()), (B = Date.now()), (heal = false);
			window.user ? (user.alive = true) : (user.alive = false);
			S.AutoSpike.e = false;
			S.DropSword.e = false;
			S.SwordInChest.e = false;
		}
	} else {
		var t = new Uint8Array(e.data);
		switch (t[0]) {
			case 16:
				A = Date.now();
				if (heal) B = Date.now();
				heal = !heal;
				x = { hp: t[1], food: t[2], temp: t[3], water: t[4], air: t[5], heat: t[6] };
				eatFood(x.food, x.water, x.heat);
				break;
			case 25:
				if (!window.user["ΔⲆⵠⲆ"]["ᐃᐃΔ"][149] || !window.user["ΔⲆⵠⲆ"]["ᐃᐃΔ"][79]) user.alive = false;
				else window.reborn = false;
				break;
			case 29:
				window.reborn = true;
				readys.AutoCrown = false;
				setTimeout(() => (readys.AutoCrown = true), 5000);
				client["ⲆⲆΔⲆΔ"](INV.CROWN_BLUE);
				client["ⲆⲆΔⲆΔ"](getBestHammer());
				break;
			case 37:
				x && (x.hp = t[1]);
				break;
			case 38:
				x && (x.food = t[1]);
				break;
			case 39:
				x && (x.food = t[1]);
				break;
			case 55:
				x && (x.heat = t[1]);
				break;
			case 56:
				x && (x.temp = t[1]);
				break;
			case 68:
				window.sandstorm = t[1];
				break;
			case 69:
				window.blizard = t[1];
				break;
		}
	}
};

let COUNTER = 0;

window.INV = {
	SWORD: COUNTER++,
	PICK: COUNTER++,
	FUR: COUNTER++,
	PICK_GOLD: COUNTER++,
	PICK_DIAMOND: COUNTER++,
	SWORD_GOLD: COUNTER++,
	SWORD_DIAMOND: COUNTER++,
	HAND: COUNTER++,
	PICK_WOOD: COUNTER++,
	PIRATE_SWORD: COUNTER++,
	EARMUFFS: COUNTER++,
	COAT: COUNTER++,
	WOOD_SPEAR: COUNTER++,
	SPEAR: COUNTER++,
	GOLD_SPEAR: COUNTER++,
	DIAMOND_SPEAR: COUNTER++,
	DRAGON_SPEAR: COUNTER++,
	LAVA_SPEAR: COUNTER++,
	CRAB_SPEAR: COUNTER++,
	REIDITE_SWORD: COUNTER++,
	DIAMOND_PROTECTION: COUNTER++,
	AMETHYST_PROTECTION: COUNTER++,
	REIDITE_PROTECTION: COUNTER++,
	EXPLORER_HAT: COUNTER++,
	PIRATE_HAT: COUNTER++,
	STONE_HELMET: COUNTER++,
	GOLD_HELMET: COUNTER++,
	DIAMOND_HELMET: COUNTER++,
	BOOK: COUNTER++,
	BAG: COUNTER++,
	SWORD_AMETHYST: COUNTER++,
	PICK_AMETHYST: COUNTER++,
	PICK_REIDITE: COUNTER++,
	AMETHYST_SPEAR: COUNTER++,
	REIDITE_SPEAR: COUNTER++,
	HAMMER: COUNTER++,
	HAMMER_GOLD: COUNTER++,
	HAMMER_DIAMOND: COUNTER++,
	HAMMER_AMETHYST: COUNTER++,
	HAMMER_REIDITE: COUNTER++,
	CAP_SCARF: COUNTER++,

	//Christmas
	CHRISTMAS_HAT: COUNTER++,
	ELF_HAT: COUNTER++,

	AMETHYST_HELMET: COUNTER++,
	REIDITE_HELMET: COUNTER++,
	SUPER_HAMMER: COUNTER++,
	SHOVEL: COUNTER++,
	SUPER_DIVING_SUIT: COUNTER++,
	DIVING_MASK: COUNTER++,
	WATERING_CAN_FULL: COUNTER++,
	SHOVEL_GOLD: COUNTER++,
	SHOVEL_DIAMOND: COUNTER++,
	SHOVEL_AMETHYST: COUNTER++,
	PITCHFORK: COUNTER++,
	PITCHFORK2: COUNTER++,
	SPANNER: COUNTER++,
	MACHETE: COUNTER++,
	SWORD_WOOD: COUNTER++,
	WOOD_HELMET: COUNTER++,
	DRAGON_HELMET: COUNTER++,
	LAVA_HELMET: COUNTER++,
	CROWN_CRAB: COUNTER++,
	DRAGON_SWORD: COUNTER++,
	LAVA_SWORD: COUNTER++,
	WOOD_BOW: COUNTER++,
	STONE_BOW: COUNTER++,
	GOLD_BOW: COUNTER++,
	DIAMOND_BOW: COUNTER++,
	AMETHYST_BOW: COUNTER++,
	REIDITE_BOW: COUNTER++,
	DRAGON_BOW: COUNTER++,
	WOOD_SHIELD: COUNTER++,
	STONE_SHIELD: COUNTER++,
	GOLD_SHIELD: COUNTER++,
	DIAMOND_SHIELD: COUNTER++,
	AMETHYST_SHIELD: COUNTER++,
	REIDITE_SHIELD: COUNTER++,
	CROWN_GREEN: COUNTER++,
	CROWN_ORANGE: COUNTER++,
	CROWN_BLUE: COUNTER++,
	TURBAN1: COUNTER++,
	TURBAN2: COUNTER++,
	PILOT_HELMET: COUNTER++,
	HOOD: COUNTER++,
	PEASANT: COUNTER++,
	WINTER_HOOD: COUNTER++,
	WINTER_PEASANT: COUNTER++,

	FLOWER_HAT: COUNTER++,
	FUR_HAT: COUNTER++,
	SADDLE: COUNTER++,

	WITCH: COUNTER++,
	NIMBUS: COUNTER++,
	WAND1: COUNTER++,
	WAND2: COUNTER++,
	WOOD_AXE: COUNTER++,
	STONE_AXE: COUNTER++,
	GOLD_AXE: COUNTER++,
	DIAMOND_AXE: COUNTER++,
	AMETHYST_AXE: COUNTER++,
	REIDITE_AXE: COUNTER++,
	FIREFLY: COUNTER++,
	WOOD_ARROW: COUNTER++,
	STONE_ARROW: COUNTER++,
	GOLD_ARROW: COUNTER++,
	DIAMOND_ARROW: COUNTER++,
	AMETHYST_ARROW: COUNTER++,
	REIDITE_ARROW: COUNTER++,
	DRAGON_ARROW: COUNTER++,

	STONE: COUNTER++,
	WOOD: COUNTER++,
	PLANT: COUNTER++,
	GOLD: COUNTER++,
	DIAMOND: COUNTER++,
	FIRE: COUNTER++,
	WORKBENCH: COUNTER++,
	SEED: COUNTER++,
	MEAT: COUNTER++,
	COOKED_MEAT: COUNTER++,
	BIG_FIRE: COUNTER++,
	FURNACE: COUNTER++,
	PAPER: COUNTER++,
	AMETHYST: COUNTER++,
	AMETHYST_WALL: COUNTER++,
	AMETHYST_SPIKE: COUNTER++,
	AMETHYST_DOOR: COUNTER++,
	BRIDGE: COUNTER++,
	SAND: COUNTER++,
	BOTTLE_FULL: COUNTER++,
	BOTTLE_EMPTY: COUNTER++,
	KRAKEN_SKIN: COUNTER++,
	WATERING_CAN: COUNTER++,
	FLOUR: COUNTER++,
	WHEAT_SEED: COUNTER++,
	COOKIE: COUNTER++,
	WILD_WHEAT: COUNTER++,
	WINDMILL: COUNTER++,
	CAKE: COUNTER++,
	FOODFISH: COUNTER++,
	FOODFISH_COOKED: COUNTER++,
	SCALES: COUNTER++,
	GROUND: COUNTER++,
	PLOT: COUNTER++,
	ICE: COUNTER++,
	BREAD: COUNTER++,
	BREAD_OVEN: COUNTER++,
	SANDWICH: COUNTER++,

	FUR_WINTER: COUNTER++,
	BLUE_CORD: COUNTER++,
	LOCK: COUNTER++,
	DRAGON_HEART: COUNTER++,
	LAVA_HEART: COUNTER++,
	RESURRECTION: COUNTER++,
	EMERALD_MACHINE: COUNTER++,

	EXTRACTOR_MACHINE_STONE: COUNTER++,
	EXTRACTOR_MACHINE_GOLD: COUNTER++,
	EXTRACTOR_MACHINE_DIAMOND: COUNTER++,
	EXTRACTOR_MACHINE_AMETHYST: COUNTER++,
	EXTRACTOR_MACHINE_REIDITE: COUNTER++,

	LOCKPICK: COUNTER++,
	TOTEM: COUNTER++,
	SPIKE: COUNTER++,
	CORD: COUNTER++,
	WALL: COUNTER++,
	STONE_WALL: COUNTER++,
	GOLD_WALL: COUNTER++,
	DIAMOND_WALL: COUNTER++,
	WOOD_DOOR: COUNTER++,
	CHEST: COUNTER++,
	STONE_SPIKE: COUNTER++,
	GOLD_SPIKE: COUNTER++,
	DIAMOND_SPIKE: COUNTER++,
	STONE_DOOR: COUNTER++,
	GOLD_DOOR: COUNTER++,
	DIAMOND_DOOR: COUNTER++,
	FUR_WOLF: COUNTER++,
	GEMME_GREEN: COUNTER++,
	GEMME_ORANGE: COUNTER++,
	GEMME_BLUE: COUNTER++,
	SPECIAL_FUR: COUNTER++,
	SPECIAL_FUR_2: COUNTER++,
	BUCKET_FULL: COUNTER++,
	BUCKET_EMPTY: COUNTER++,
	WELL: COUNTER++,
	SIGN: COUNTER++,
	DRAGON_CUBE: COUNTER++,
	DRAGON_ORB: COUNTER++,
	LAVA_CUBE: COUNTER++,
	LAVA_ORB: COUNTER++,
	PUMPKIN_SEED: COUNTER++,
	PUMPKIN: COUNTER++,
	ROOF: COUNTER++,
	GARLIC_SEED: COUNTER++,
	GARLIC: COUNTER++,
	THORNBUSH_SEED: COUNTER++,
	THORNBUSH: COUNTER++,
	BANDAGE: COUNTER++,

	CRAB_STICK: COUNTER++,
	CRAB_LOOT: COUNTER++,
	BED: COUNTER++,

	//Christmas
	SUGAR_CAN: COUNTER++,
	CANDY: COUNTER++,
	GARLAND: COUNTER++,

	//LAVA BIOME
	REIDITE: COUNTER++,
	FLAME: COUNTER++,

	//FARMS UPDATE
	CARROT_SEED: COUNTER++,
	CARROT: COUNTER++,
	TOMATO_SEED: COUNTER++,
	TOMATO: COUNTER++,
	WATERMELON_SEED: COUNTER++,
	WATERMELON: COUNTER++,
	ALOE_VERA_SEED: COUNTER++,
	ALOE_VERA: COUNTER++,

	WOOD_DOOR_SPIKE: COUNTER++,
	STONE_DOOR_SPIKE: COUNTER++,
	GOLD_DOOR_SPIKE: COUNTER++,
	DIAMOND_DOOR_SPIKE: COUNTER++,
	AMETHYST_DOOR_SPIKE: COUNTER++,
	REIDITE_WALL: COUNTER++,
	REIDITE_DOOR: COUNTER++,
	REIDITE_SPIKE: COUNTER++,
	REIDITE_DOOR_SPIKE: COUNTER++,
	WOOD_TOWER: COUNTER++,
	PENGUIN_FEATHER: COUNTER++,
	BOAT: COUNTER++,
	SLED: COUNTER++,
	MOUNT_BOAR: COUNTER++,
	CRAB_BOSS: COUNTER++,
	BABY_DRAGON: COUNTER++,
	BABY_LAVA: COUNTER++,
	HAWK: COUNTER++,
	PLANE: COUNTER++,
	HAWK_FEATHER: COUNTER++,
	VULTURE_FEATHER: COUNTER++,
	CACTUS: COUNTER++,
	EMERALD: COUNTER++,
	PITCHFORK_PART: COUNTER++,
	PILOT_GLASSES: COUNTER++,
	FUR_BOAR: COUNTER++,
	SANDWORM_JUICE: COUNTER++,
	BABY_MAMMOTH: COUNTER++,
	FUR_MAMMOTH: COUNTER++,
};
window.ITEMS = {
	PLAYERS: 0,
	FIRE: 1,
	WORKBENCH: 2,
	SEED: 3,
	WALL: 4,
	SPIKE: 5,
	BIG_FIRE: 6,
	STONE_WALL: 7,
	GOLD_WALL: 8,
	DIAMOND_WALL: 9,
	WOOD_DOOR: 10,
	CHEST: 11,
	STONE_SPIKE: 12,
	GOLD_SPIKE: 13,
	DIAMOND_SPIKE: 14,
	STONE_DOOR: 15,
	GOLD_DOOR: 16,
	DIAMOND_DOOR: 17,
	FURNACE: 18,
	AMETHYST_WALL: 19,
	AMETHYST_SPIKE: 20,
	AMETHYST_DOOR: 21,
	RESURRECTION: 22,
	EMERALD_MACHINE: 23,

	EXTRACTOR_MACHINE_STONE: 24,
	EXTRACTOR_MACHINE_GOLD: 25,
	EXTRACTOR_MACHINE_DIAMOND: 26,
	EXTRACTOR_MACHINE_AMETHYST: 27,
	EXTRACTOR_MACHINE_REIDITE: 28,

	TOTEM: 29,
	BRIDGE: 30,
	WHEAT_SEED: 31,
	WINDMILL: 32,
	PLOT: 33,
	BREAD_OVEN: 34,
	WELL: 35,
	SIGN: 36,
	PUMPKIN_SEED: 37,
	ROOF: 38,
	GARLIC_SEED: 39,
	THORNBUSH_SEED: 40,
	BED: 41,
	//Christmas
	GARLAND: 42,
	TOMATO_SEED: 43,
	CARROT_SEED: 44,

	WOOD_DOOR_SPIKE: 45,
	STONE_DOOR_SPIKE: 46,
	GOLD_DOOR_SPIKE: 47,
	DIAMOND_DOOR_SPIKE: 48,
	AMETHYST_DOOR_SPIKE: 49,

	REIDITE_WALL: 50,
	REIDITE_DOOR: 51,
	REIDITE_SPIKE: 52,
	REIDITE_DOOR_SPIKE: 53,

	WATERMELON_SEED: 54,
	ALOE_VERA_SEED: 55,
	WOOD_TOWER: 56,

	WOLF: 60,
	SPIDER: 61,
	FOX: 62,
	BEAR: 63,
	DRAGON: 64,
	PIRANHA: 65,
	KRAKEN: 66,
	CRAB: 67,
	FLAME: 68,
	LAVA_DRAGON: 69,
	BOAR: 70,
	CRAB_BOSS: 71,
	BABY_DRAGON: 72,
	BABY_LAVA: 73,
	HAWK: 74,
	VULTURE: 75,
	SAND_WORM: 76,
	BABY_MAMMOTH: 77,
	MAMMOTH: 78,

	WHEAT_MOB: 79,
	RABBIT: 80,
	TREASURE_CHEST: 81,
	DEAD_BOX: 82,
	PUMPKIN_MOB: 83,
	GARLIC_MOB: 84,
	THORNBUSH_MOB: 85,
	CRATE: 86,

	//Christmas
	GIFT: 87,

	PENGUIN: 88,
	ALOE_VERA_MOB: 89,
	FIREFLY: 90,
	SPELL: 91,

	FRUIT: 100,
};

(window.x = { hp: 100, food: 100, temp: 100, water: 100, air: 100, heat: 0 }), (A = Date.now()), (B = Date.now());

var CLIENT = {
	VERSION_NUMBER: 52,

	TIMEOUT_TIME: 1000,
	TIMEOUT_NUMBER: 1,

	PING: "[6]",
	PING_DELAY: 600,
	ROTATE: 0.2,
	ATTACK: 0.2,
	SLOW_ATTACK: 0.58,

	CAM_DELAY: 50,

	TIMEOUT_SERVER: 1000 * 60 * 60 * 24 * 3600,
	WAITING_FOR_SERVER: 5000,

	DELAY_CONNECTION_UPDATE: 5,

	LAG_DISTANCE: 150,

	LOOSE_FOCUS: 15,

	TOKEN_LEN: 20,

	TEAM_MANAGE: 0,
	TEAM_SHOW: 1,
	TEAM_LEAVE: 2,
	TEAM_JOIN: 3,
	TEAM_FULL: 4,

	SKIN_MAX: 20,
	ACCESSORY_MAX: 14,
	SYMBOL_MAX: 4,
};
var STATE = {
	DELETE: 1,
	HURT: 2,
	COLD: 4,
	HUNGER: 8,
	ATTACK: 16,
	WALK: 32,
	IDLE: 64,
	HEAL: 128,
	WEB: 256,
};

CanvasRenderingContext2D.prototype.drawImage = new Proxy(CanvasRenderingContext2D.prototype.drawImage, {
	apply: function (target, thisArg, args) {
		if (S.Xray.e) thisArg.globalAlpha = 0.6;
		return Function.prototype.apply.apply(target, [thisArg, args]);
	},
});
